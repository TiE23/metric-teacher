# source: http://self:4466/server/dev
# timestamp: Wed May 09 2018 17:00:24 GMT-0700 (PDT)

type AggregateClassroom {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateEnrollment {
  count: Int!
}

type AggregateMastery {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateScale {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubSubject {
  count: Int!
}

type AggregateSurvey {
  count: Int!
}

type AggregateUnit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Classroom implements Node {
  id: ID!
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type ClassroomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassroomEdge]!
  aggregate: AggregateClassroom!
}

input ClassroomCreateInput {
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  users: UserCreateManyWithoutClassroomsInput
}

input ClassroomCreateManyWithoutUsersInput {
  create: [ClassroomCreateWithoutUsersInput!]
  connect: [ClassroomWhereUniqueInput!]
}

input ClassroomCreateWithoutUsersInput {
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
}

"""An edge in a connection."""
type ClassroomEdge {
  """The item at the end of the edge."""
  node: Classroom!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassroomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  notes_ASC
  notes_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClassroomPreviousValues {
  id: ID!
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
}

type ClassroomSubscriptionPayload {
  mutation: MutationType!
  node: Classroom
  updatedFields: [String!]
  previousValues: ClassroomPreviousValues
}

input ClassroomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassroomWhereInput
}

input ClassroomUpdateInput {
  name: String
  description: String
  status: Int
  flags: Int
  notes: String
  users: UserUpdateManyWithoutClassroomsInput
}

input ClassroomUpdateManyWithoutUsersInput {
  create: [ClassroomCreateWithoutUsersInput!]
  connect: [ClassroomWhereUniqueInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  delete: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutUsersInput!]
}

input ClassroomUpdateWithoutUsersDataInput {
  name: String
  description: String
  status: Int
  flags: Int
  notes: String
}

input ClassroomUpdateWithWhereUniqueWithoutUsersInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUpdateWithoutUsersDataInput!
}

input ClassroomUpsertWithWhereUniqueWithoutUsersInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUpdateWithoutUsersDataInput!
  create: ClassroomCreateWithoutUsersInput!
}

input ClassroomWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input ClassroomWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  status: Int!
  flags: Int!
  parent(where: EnrollmentWhereInput): Enrollment!
  masteries(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery!]
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  masteries: MasteryCreateManyWithoutParentInput
  surveys: SurveyCreateManyWithoutParentInput
  subjects: SubjectCreateManyInput
}

input CourseCreateManyWithoutParentInput {
  create: [CourseCreateWithoutParentInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutMasteriesInput {
  create: CourseCreateWithoutMasteriesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutSurveysInput {
  create: CourseCreateWithoutSurveysInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutMasteriesInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  surveys: SurveyCreateManyWithoutParentInput
  subjects: SubjectCreateManyInput
}

input CourseCreateWithoutParentInput {
  status: Int!
  flags: Int!
  masteries: MasteryCreateManyWithoutParentInput
  surveys: SurveyCreateManyWithoutParentInput
  subjects: SubjectCreateManyInput
}

input CourseCreateWithoutSurveysInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  masteries: MasteryCreateManyWithoutParentInput
  subjects: SubjectCreateManyInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  status: Int!
  flags: Int!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneWithoutCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
  surveys: SurveyUpdateManyWithoutParentInput
  subjects: SubjectUpdateManyInput
}

input CourseUpdateManyWithoutParentInput {
  create: [CourseCreateWithoutParentInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutParentInput!]
}

input CourseUpdateOneWithoutMasteriesInput {
  create: CourseCreateWithoutMasteriesInput
  connect: CourseWhereUniqueInput
  delete: Boolean
  update: CourseUpdateWithoutMasteriesDataInput
  upsert: CourseUpsertWithoutMasteriesInput
}

input CourseUpdateOneWithoutSurveysInput {
  create: CourseCreateWithoutSurveysInput
  connect: CourseWhereUniqueInput
  delete: Boolean
  update: CourseUpdateWithoutSurveysDataInput
  upsert: CourseUpsertWithoutSurveysInput
}

input CourseUpdateWithoutMasteriesDataInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneWithoutCoursesInput
  surveys: SurveyUpdateManyWithoutParentInput
  subjects: SubjectUpdateManyInput
}

input CourseUpdateWithoutParentDataInput {
  status: Int
  flags: Int
  masteries: MasteryUpdateManyWithoutParentInput
  surveys: SurveyUpdateManyWithoutParentInput
  subjects: SubjectUpdateManyInput
}

input CourseUpdateWithoutSurveysDataInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneWithoutCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
  subjects: SubjectUpdateManyInput
}

input CourseUpdateWithWhereUniqueWithoutParentInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutParentDataInput!
}

input CourseUpsertWithoutMasteriesInput {
  update: CourseUpdateWithoutMasteriesDataInput!
  create: CourseCreateWithoutMasteriesInput!
}

input CourseUpsertWithoutSurveysInput {
  update: CourseUpdateWithoutSurveysDataInput!
  create: CourseCreateWithoutSurveysInput!
}

input CourseUpsertWithWhereUniqueWithoutParentInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutParentDataInput!
  create: CourseCreateWithoutParentInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  parent: EnrollmentWhereInput
  masteries_every: MasteryWhereInput
  masteries_some: MasteryWhereInput
  masteries_none: MasteryWhereInput
  surveys_every: SurveyWhereInput
  surveys_some: SurveyWhereInput
  surveys_none: SurveyWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

type Enrollment implements Node {
  id: ID!
  student(where: UserWhereInput): User!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type EnrollmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnrollmentEdge]!
  aggregate: AggregateEnrollment!
}

input EnrollmentCreateInput {
  student: UserCreateOneWithoutEnrollmentInput!
  courses: CourseCreateManyWithoutParentInput
}

input EnrollmentCreateOneWithoutCoursesInput {
  create: EnrollmentCreateWithoutCoursesInput
  connect: EnrollmentWhereUniqueInput
}

input EnrollmentCreateOneWithoutStudentInput {
  create: EnrollmentCreateWithoutStudentInput
  connect: EnrollmentWhereUniqueInput
}

input EnrollmentCreateWithoutCoursesInput {
  student: UserCreateOneWithoutEnrollmentInput!
}

input EnrollmentCreateWithoutStudentInput {
  courses: CourseCreateManyWithoutParentInput
}

"""An edge in a connection."""
type EnrollmentEdge {
  """The item at the end of the edge."""
  node: Enrollment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnrollmentOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnrollmentPreviousValues {
  id: ID!
}

type EnrollmentSubscriptionPayload {
  mutation: MutationType!
  node: Enrollment
  updatedFields: [String!]
  previousValues: EnrollmentPreviousValues
}

input EnrollmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnrollmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnrollmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnrollmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnrollmentWhereInput
}

input EnrollmentUpdateInput {
  student: UserUpdateOneWithoutEnrollmentInput
  courses: CourseUpdateManyWithoutParentInput
}

input EnrollmentUpdateOneWithoutCoursesInput {
  create: EnrollmentCreateWithoutCoursesInput
  connect: EnrollmentWhereUniqueInput
  delete: Boolean
  update: EnrollmentUpdateWithoutCoursesDataInput
  upsert: EnrollmentUpsertWithoutCoursesInput
}

input EnrollmentUpdateOneWithoutStudentInput {
  create: EnrollmentCreateWithoutStudentInput
  connect: EnrollmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnrollmentUpdateWithoutStudentDataInput
  upsert: EnrollmentUpsertWithoutStudentInput
}

input EnrollmentUpdateWithoutCoursesDataInput {
  student: UserUpdateOneWithoutEnrollmentInput
}

input EnrollmentUpdateWithoutStudentDataInput {
  courses: CourseUpdateManyWithoutParentInput
}

input EnrollmentUpsertWithoutCoursesInput {
  update: EnrollmentUpdateWithoutCoursesDataInput!
  create: EnrollmentCreateWithoutCoursesInput!
}

input EnrollmentUpsertWithoutStudentInput {
  update: EnrollmentUpdateWithoutStudentDataInput!
  create: EnrollmentCreateWithoutStudentInput!
}

input EnrollmentWhereInput {
  """Logical AND on all given filters."""
  AND: [EnrollmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnrollmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnrollmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  student: UserWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input EnrollmentWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mastery implements Node {
  id: ID!
  status: Int!
  score: Int!
  parent(where: CourseWhereInput): Course!
  subSubject(where: SubSubjectWhereInput): SubSubject!
}

"""A connection to a list of items."""
type MasteryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MasteryEdge]!
  aggregate: AggregateMastery!
}

input MasteryCreateInput {
  status: Int!
  score: Int!
  parent: CourseCreateOneWithoutMasteriesInput!
  subSubject: SubSubjectCreateOneInput!
}

input MasteryCreateManyWithoutParentInput {
  create: [MasteryCreateWithoutParentInput!]
  connect: [MasteryWhereUniqueInput!]
}

input MasteryCreateWithoutParentInput {
  status: Int!
  score: Int!
  subSubject: SubSubjectCreateOneInput!
}

"""An edge in a connection."""
type MasteryEdge {
  """The item at the end of the edge."""
  node: Mastery!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MasteryOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  score_ASC
  score_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MasteryPreviousValues {
  id: ID!
  status: Int!
  score: Int!
}

type MasterySubscriptionPayload {
  mutation: MutationType!
  node: Mastery
  updatedFields: [String!]
  previousValues: MasteryPreviousValues
}

input MasterySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MasterySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasterySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasterySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MasteryWhereInput
}

input MasteryUpdateInput {
  status: Int
  score: Int
  parent: CourseUpdateOneWithoutMasteriesInput
  subSubject: SubSubjectUpdateOneInput
}

input MasteryUpdateManyWithoutParentInput {
  create: [MasteryCreateWithoutParentInput!]
  connect: [MasteryWhereUniqueInput!]
  disconnect: [MasteryWhereUniqueInput!]
  delete: [MasteryWhereUniqueInput!]
  update: [MasteryUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [MasteryUpsertWithWhereUniqueWithoutParentInput!]
}

input MasteryUpdateWithoutParentDataInput {
  status: Int
  score: Int
  subSubject: SubSubjectUpdateOneInput
}

input MasteryUpdateWithWhereUniqueWithoutParentInput {
  where: MasteryWhereUniqueInput!
  data: MasteryUpdateWithoutParentDataInput!
}

input MasteryUpsertWithWhereUniqueWithoutParentInput {
  where: MasteryWhereUniqueInput!
  update: MasteryUpdateWithoutParentDataInput!
  create: MasteryCreateWithoutParentInput!
}

input MasteryWhereInput {
  """Logical AND on all given filters."""
  AND: [MasteryWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasteryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasteryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  parent: CourseWhereInput
  subSubject: SubSubjectWhereInput
}

input MasteryWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createClassroom(data: ClassroomCreateInput!): Classroom!
  createEnrollment(data: EnrollmentCreateInput!): Enrollment!
  createCourse(data: CourseCreateInput!): Course!
  createMastery(data: MasteryCreateInput!): Mastery!
  createSurvey(data: SurveyCreateInput!): Survey!
  createSubject(data: SubjectCreateInput!): Subject!
  createSubSubject(data: SubSubjectCreateInput!): SubSubject!
  createQuestion(data: QuestionCreateInput!): Question!
  createUnit(data: UnitCreateInput!): Unit!
  createScale(data: ScaleCreateInput!): Scale!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateEnrollment(data: EnrollmentUpdateInput!, where: EnrollmentWhereUniqueInput!): Enrollment
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateMastery(data: MasteryUpdateInput!, where: MasteryWhereUniqueInput!): Mastery
  updateSurvey(data: SurveyUpdateInput!, where: SurveyWhereUniqueInput!): Survey
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateSubSubject(data: SubSubjectUpdateInput!, where: SubSubjectWhereUniqueInput!): SubSubject
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateUnit(data: UnitUpdateInput!, where: UnitWhereUniqueInput!): Unit
  updateScale(data: ScaleUpdateInput!, where: ScaleWhereUniqueInput!): Scale
  deleteUser(where: UserWhereUniqueInput!): User
  deleteClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteMastery(where: MasteryWhereUniqueInput!): Mastery
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteSubSubject(where: SubSubjectWhereUniqueInput!): SubSubject
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteScale(where: ScaleWhereUniqueInput!): Scale
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertClassroom(where: ClassroomWhereUniqueInput!, create: ClassroomCreateInput!, update: ClassroomUpdateInput!): Classroom!
  upsertEnrollment(where: EnrollmentWhereUniqueInput!, create: EnrollmentCreateInput!, update: EnrollmentUpdateInput!): Enrollment!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertMastery(where: MasteryWhereUniqueInput!, create: MasteryCreateInput!, update: MasteryUpdateInput!): Mastery!
  upsertSurvey(where: SurveyWhereUniqueInput!, create: SurveyCreateInput!, update: SurveyUpdateInput!): Survey!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertSubSubject(where: SubSubjectWhereUniqueInput!, create: SubSubjectCreateInput!, update: SubSubjectUpdateInput!): SubSubject!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertUnit(where: UnitWhereUniqueInput!, create: UnitCreateInput!, update: UnitUpdateInput!): Unit!
  upsertScale(where: ScaleWhereUniqueInput!, create: ScaleCreateInput!, update: ScaleUpdateInput!): Scale!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyClassrooms(data: ClassroomUpdateInput!, where: ClassroomWhereInput): BatchPayload!
  updateManyEnrollments(data: EnrollmentUpdateInput!, where: EnrollmentWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput): BatchPayload!
  updateManyMasteries(data: MasteryUpdateInput!, where: MasteryWhereInput): BatchPayload!
  updateManySurveys(data: SurveyUpdateInput!, where: SurveyWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateInput!, where: SubjectWhereInput): BatchPayload!
  updateManySubSubjects(data: SubSubjectUpdateInput!, where: SubSubjectWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  updateManyUnits(data: UnitUpdateInput!, where: UnitWhereInput): BatchPayload!
  updateManyScales(data: ScaleUpdateInput!, where: ScaleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyClassrooms(where: ClassroomWhereInput): BatchPayload!
  deleteManyEnrollments(where: EnrollmentWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyMasteries(where: MasteryWhereInput): BatchPayload!
  deleteManySurveys(where: SurveyWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManySubSubjects(where: SubSubjectWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyUnits(where: UnitWhereInput): BatchPayload!
  deleteManyScales(where: ScaleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom]!
  enrollments(where: EnrollmentWhereInput, orderBy: EnrollmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enrollment]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  masteries(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery]!
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  units(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Unit]!
  scales(where: ScaleWhereInput, orderBy: ScaleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scale]!
  user(where: UserWhereUniqueInput!): User
  classroom(where: ClassroomWhereUniqueInput!): Classroom
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  course(where: CourseWhereUniqueInput!): Course
  mastery(where: MasteryWhereUniqueInput!): Mastery
  survey(where: SurveyWhereUniqueInput!): Survey
  subject(where: SubjectWhereUniqueInput!): Subject
  subSubject(where: SubSubjectWhereUniqueInput!): SubSubject
  question(where: QuestionWhereUniqueInput!): Question
  unit(where: UnitWhereUniqueInput!): Unit
  scale(where: ScaleWhereUniqueInput!): Scale
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  classroomsConnection(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassroomConnection!
  enrollmentsConnection(where: EnrollmentWhereInput, orderBy: EnrollmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnrollmentConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  masteriesConnection(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MasteryConnection!
  surveysConnection(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  subSubjectsConnection(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubSubjectConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  unitsConnection(where: UnitWhereInput, orderBy: UnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UnitConnection!
  scalesConnection(where: ScaleWhereInput, orderBy: ScaleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScaleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent(where: SubSubjectWhereInput): SubSubject!
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubjectCreateOneWithoutQuestionsInput!
}

input QuestionCreateManyWithoutParentInput {
  create: [QuestionCreateWithoutParentInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutParentInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  difficulty_ASC
  difficulty_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
  media_ASC
  media_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneWithoutQuestionsInput
}

input QuestionUpdateInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneWithoutQuestionsInput
}

input QuestionUpdateManyWithoutParentInput {
  create: [QuestionCreateWithoutParentInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutParentInput!]
}

input QuestionUpdateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  delete: Boolean
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
}

input QuestionUpdateWithoutParentDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
}

input QuestionUpdateWithWhereUniqueWithoutParentInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutParentDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithWhereUniqueWithoutParentInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutParentDataInput!
  create: QuestionCreateWithoutParentInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  media: String

  """All values that are not equal to given value."""
  media_not: String

  """All values that are contained in given list."""
  media_in: [String!]

  """All values that are not contained in given list."""
  media_not_in: [String!]

  """All values less than the given value."""
  media_lt: String

  """All values less than or equal the given value."""
  media_lte: String

  """All values greater than the given value."""
  media_gt: String

  """All values greater than or equal the given value."""
  media_gte: String

  """All values containing the given string."""
  media_contains: String

  """All values not containing the given string."""
  media_not_contains: String

  """All values starting with the given string."""
  media_starts_with: String

  """All values not starting with the given string."""
  media_not_starts_with: String

  """All values ending with the given string."""
  media_ends_with: String

  """All values not ending with the given string."""
  media_not_ends_with: String
  parent: SubSubjectWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Scale implements Node {
  id: ID!
  name: String!
  description: String!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject!]
}

"""A connection to a list of items."""
type ScaleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScaleEdge]!
  aggregate: AggregateScale!
}

input ScaleCreateInput {
  name: String!
  description: String!
  subSubjects: SubSubjectCreateManyWithoutScaleInput
}

input ScaleCreateOneWithoutSubSubjectsInput {
  create: ScaleCreateWithoutSubSubjectsInput
  connect: ScaleWhereUniqueInput
}

input ScaleCreateWithoutSubSubjectsInput {
  name: String!
  description: String!
}

"""An edge in a connection."""
type ScaleEdge {
  """The item at the end of the edge."""
  node: Scale!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScaleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ScalePreviousValues {
  id: ID!
  name: String!
  description: String!
}

type ScaleSubscriptionPayload {
  mutation: MutationType!
  node: Scale
  updatedFields: [String!]
  previousValues: ScalePreviousValues
}

input ScaleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScaleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScaleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScaleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScaleWhereInput
}

input ScaleUpdateInput {
  name: String
  description: String
  subSubjects: SubSubjectUpdateManyWithoutScaleInput
}

input ScaleUpdateOneWithoutSubSubjectsInput {
  create: ScaleCreateWithoutSubSubjectsInput
  connect: ScaleWhereUniqueInput
  delete: Boolean
  update: ScaleUpdateWithoutSubSubjectsDataInput
  upsert: ScaleUpsertWithoutSubSubjectsInput
}

input ScaleUpdateWithoutSubSubjectsDataInput {
  name: String
  description: String
}

input ScaleUpsertWithoutSubSubjectsInput {
  update: ScaleUpdateWithoutSubSubjectsDataInput!
  create: ScaleCreateWithoutSubSubjectsInput!
}

input ScaleWhereInput {
  """Logical AND on all given filters."""
  AND: [ScaleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScaleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScaleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  subSubjects_every: SubSubjectWhereInput
  subSubjects_some: SubSubjectWhereInput
  subSubjects_none: SubSubjectWhereInput
}

input ScaleWhereUniqueInput {
  id: ID
  name: String
}

type Subject implements Node {
  id: ID!
  name: String!
  description: String!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject!]
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  name: String!
  description: String!
  subSubjects: SubSubjectCreateManyWithoutParentInput
}

input SubjectCreateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateOneWithoutSubSubjectsInput {
  create: SubjectCreateWithoutSubSubjectsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateWithoutSubSubjectsInput {
  name: String!
  description: String!
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubjectPreviousValues {
  id: ID!
  name: String!
  description: String!
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

input SubjectUpdateDataInput {
  name: String
  description: String
  subSubjects: SubSubjectUpdateManyWithoutParentInput
}

input SubjectUpdateInput {
  name: String
  description: String
  subSubjects: SubSubjectUpdateManyWithoutParentInput
}

input SubjectUpdateManyInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  delete: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueNestedInput!]
  upsert: [SubjectUpsertWithWhereUniqueNestedInput!]
}

input SubjectUpdateOneWithoutSubSubjectsInput {
  create: SubjectCreateWithoutSubSubjectsInput
  connect: SubjectWhereUniqueInput
  delete: Boolean
  update: SubjectUpdateWithoutSubSubjectsDataInput
  upsert: SubjectUpsertWithoutSubSubjectsInput
}

input SubjectUpdateWithoutSubSubjectsDataInput {
  name: String
  description: String
}

input SubjectUpdateWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateDataInput!
}

input SubjectUpsertWithoutSubSubjectsInput {
  update: SubjectUpdateWithoutSubSubjectsDataInput!
  create: SubjectCreateWithoutSubSubjectsInput!
}

input SubjectUpsertWithWhereUniqueNestedInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateDataInput!
  create: SubjectCreateInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  subSubjects_every: SubSubjectWhereInput
  subSubjects_some: SubSubjectWhereInput
  subSubjects_none: SubSubjectWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  classroom(where: ClassroomSubscriptionWhereInput): ClassroomSubscriptionPayload
  enrollment(where: EnrollmentSubscriptionWhereInput): EnrollmentSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  mastery(where: MasterySubscriptionWhereInput): MasterySubscriptionPayload
  survey(where: SurveySubscriptionWhereInput): SurveySubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  subSubject(where: SubSubjectSubscriptionWhereInput): SubSubjectSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  unit(where: UnitSubscriptionWhereInput): UnitSubscriptionPayload
  scale(where: ScaleSubscriptionWhereInput): ScaleSubscriptionPayload
}

type SubSubject implements Node {
  id: ID!
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  unit(where: UnitWhereInput): Unit!
  scale(where: ScaleWhereInput): Scale!
  parent(where: SubjectWhereInput): Subject!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type SubSubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubSubjectEdge]!
  aggregate: AggregateSubSubject!
}

input SubSubjectCreateInput {
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  unit: UnitCreateOneWithoutSubSubjectsInput!
  scale: ScaleCreateOneWithoutSubSubjectsInput!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
}

input SubSubjectCreateManyWithoutParentInput {
  create: [SubSubjectCreateWithoutParentInput!]
  connect: [SubSubjectWhereUniqueInput!]
}

input SubSubjectCreateManyWithoutScaleInput {
  create: [SubSubjectCreateWithoutScaleInput!]
  connect: [SubSubjectWhereUniqueInput!]
}

input SubSubjectCreateManyWithoutUnitInput {
  create: [SubSubjectCreateWithoutUnitInput!]
  connect: [SubSubjectWhereUniqueInput!]
}

input SubSubjectCreateOneInput {
  create: SubSubjectCreateInput
  connect: SubSubjectWhereUniqueInput
}

input SubSubjectCreateOneWithoutQuestionsInput {
  create: SubSubjectCreateWithoutQuestionsInput
  connect: SubSubjectWhereUniqueInput
}

input SubSubjectCreateWithoutParentInput {
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  unit: UnitCreateOneWithoutSubSubjectsInput!
  scale: ScaleCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
}

input SubSubjectCreateWithoutQuestionsInput {
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  unit: UnitCreateOneWithoutSubSubjectsInput!
  scale: ScaleCreateOneWithoutSubSubjectsInput!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
}

input SubSubjectCreateWithoutScaleInput {
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  unit: UnitCreateOneWithoutSubSubjectsInput!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
}

input SubSubjectCreateWithoutUnitInput {
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
  scale: ScaleCreateOneWithoutSubSubjectsInput!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
}

"""An edge in a connection."""
type SubSubjectEdge {
  """The item at the end of the edge."""
  node: SubSubject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubSubjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  toMetric_ASC
  toMetric_DESC
  rarity_ASC
  rarity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SubSubjectPreviousValues {
  id: ID!
  name: String!
  description: String!
  toMetric: Boolean!
  rarity: Int!
}

type SubSubjectSubscriptionPayload {
  mutation: MutationType!
  node: SubSubject
  updatedFields: [String!]
  previousValues: SubSubjectPreviousValues
}

input SubSubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubSubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubSubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubSubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubSubjectWhereInput
}

input SubSubjectUpdateDataInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  unit: UnitUpdateOneWithoutSubSubjectsInput
  scale: ScaleUpdateOneWithoutSubSubjectsInput
  parent: SubjectUpdateOneWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  unit: UnitUpdateOneWithoutSubSubjectsInput
  scale: ScaleUpdateOneWithoutSubSubjectsInput
  parent: SubjectUpdateOneWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateManyWithoutParentInput {
  create: [SubSubjectCreateWithoutParentInput!]
  connect: [SubSubjectWhereUniqueInput!]
  disconnect: [SubSubjectWhereUniqueInput!]
  delete: [SubSubjectWhereUniqueInput!]
  update: [SubSubjectUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [SubSubjectUpsertWithWhereUniqueWithoutParentInput!]
}

input SubSubjectUpdateManyWithoutScaleInput {
  create: [SubSubjectCreateWithoutScaleInput!]
  connect: [SubSubjectWhereUniqueInput!]
  disconnect: [SubSubjectWhereUniqueInput!]
  delete: [SubSubjectWhereUniqueInput!]
  update: [SubSubjectUpdateWithWhereUniqueWithoutScaleInput!]
  upsert: [SubSubjectUpsertWithWhereUniqueWithoutScaleInput!]
}

input SubSubjectUpdateManyWithoutUnitInput {
  create: [SubSubjectCreateWithoutUnitInput!]
  connect: [SubSubjectWhereUniqueInput!]
  disconnect: [SubSubjectWhereUniqueInput!]
  delete: [SubSubjectWhereUniqueInput!]
  update: [SubSubjectUpdateWithWhereUniqueWithoutUnitInput!]
  upsert: [SubSubjectUpsertWithWhereUniqueWithoutUnitInput!]
}

input SubSubjectUpdateOneInput {
  create: SubSubjectCreateInput
  connect: SubSubjectWhereUniqueInput
  delete: Boolean
  update: SubSubjectUpdateDataInput
  upsert: SubSubjectUpsertNestedInput
}

input SubSubjectUpdateOneWithoutQuestionsInput {
  create: SubSubjectCreateWithoutQuestionsInput
  connect: SubSubjectWhereUniqueInput
  delete: Boolean
  update: SubSubjectUpdateWithoutQuestionsDataInput
  upsert: SubSubjectUpsertWithoutQuestionsInput
}

input SubSubjectUpdateWithoutParentDataInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  unit: UnitUpdateOneWithoutSubSubjectsInput
  scale: ScaleUpdateOneWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateWithoutQuestionsDataInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  unit: UnitUpdateOneWithoutSubSubjectsInput
  scale: ScaleUpdateOneWithoutSubSubjectsInput
  parent: SubjectUpdateOneWithoutSubSubjectsInput
}

input SubSubjectUpdateWithoutScaleDataInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  unit: UnitUpdateOneWithoutSubSubjectsInput
  parent: SubjectUpdateOneWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateWithoutUnitDataInput {
  name: String
  description: String
  toMetric: Boolean
  rarity: Int
  scale: ScaleUpdateOneWithoutSubSubjectsInput
  parent: SubjectUpdateOneWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateWithWhereUniqueWithoutParentInput {
  where: SubSubjectWhereUniqueInput!
  data: SubSubjectUpdateWithoutParentDataInput!
}

input SubSubjectUpdateWithWhereUniqueWithoutScaleInput {
  where: SubSubjectWhereUniqueInput!
  data: SubSubjectUpdateWithoutScaleDataInput!
}

input SubSubjectUpdateWithWhereUniqueWithoutUnitInput {
  where: SubSubjectWhereUniqueInput!
  data: SubSubjectUpdateWithoutUnitDataInput!
}

input SubSubjectUpsertNestedInput {
  update: SubSubjectUpdateDataInput!
  create: SubSubjectCreateInput!
}

input SubSubjectUpsertWithoutQuestionsInput {
  update: SubSubjectUpdateWithoutQuestionsDataInput!
  create: SubSubjectCreateWithoutQuestionsInput!
}

input SubSubjectUpsertWithWhereUniqueWithoutParentInput {
  where: SubSubjectWhereUniqueInput!
  update: SubSubjectUpdateWithoutParentDataInput!
  create: SubSubjectCreateWithoutParentInput!
}

input SubSubjectUpsertWithWhereUniqueWithoutScaleInput {
  where: SubSubjectWhereUniqueInput!
  update: SubSubjectUpdateWithoutScaleDataInput!
  create: SubSubjectCreateWithoutScaleInput!
}

input SubSubjectUpsertWithWhereUniqueWithoutUnitInput {
  where: SubSubjectWhereUniqueInput!
  update: SubSubjectUpdateWithoutUnitDataInput!
  create: SubSubjectCreateWithoutUnitInput!
}

input SubSubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubSubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubSubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubSubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  toMetric: Boolean

  """All values that are not equal to given value."""
  toMetric_not: Boolean
  rarity: Int

  """All values that are not equal to given value."""
  rarity_not: Int

  """All values that are contained in given list."""
  rarity_in: [Int!]

  """All values that are not contained in given list."""
  rarity_not_in: [Int!]

  """All values less than the given value."""
  rarity_lt: Int

  """All values less than or equal the given value."""
  rarity_lte: Int

  """All values greater than the given value."""
  rarity_gt: Int

  """All values greater than or equal the given value."""
  rarity_gte: Int
  unit: UnitWhereInput
  scale: ScaleWhereInput
  parent: SubjectWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
}

input SubSubjectWhereUniqueInput {
  id: ID
  name: String
}

type Survey implements Node {
  id: ID!
  score: Int!
  answer: String!
  parent(where: CourseWhereInput): Course!
  question(where: QuestionWhereInput): Question!
}

"""A connection to a list of items."""
type SurveyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyEdge]!
  aggregate: AggregateSurvey!
}

input SurveyCreateInput {
  score: Int!
  answer: String!
  parent: CourseCreateOneWithoutSurveysInput!
  question: QuestionCreateOneInput!
}

input SurveyCreateManyWithoutParentInput {
  create: [SurveyCreateWithoutParentInput!]
  connect: [SurveyWhereUniqueInput!]
}

input SurveyCreateWithoutParentInput {
  score: Int!
  answer: String!
  question: QuestionCreateOneInput!
}

"""An edge in a connection."""
type SurveyEdge {
  """The item at the end of the edge."""
  node: Survey!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SurveyOrderByInput {
  id_ASC
  id_DESC
  score_ASC
  score_DESC
  answer_ASC
  answer_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SurveyPreviousValues {
  id: ID!
  score: Int!
  answer: String!
}

type SurveySubscriptionPayload {
  mutation: MutationType!
  node: Survey
  updatedFields: [String!]
  previousValues: SurveyPreviousValues
}

input SurveySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SurveySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurveySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurveySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SurveyWhereInput
}

input SurveyUpdateInput {
  score: Int
  answer: String
  parent: CourseUpdateOneWithoutSurveysInput
  question: QuestionUpdateOneInput
}

input SurveyUpdateManyWithoutParentInput {
  create: [SurveyCreateWithoutParentInput!]
  connect: [SurveyWhereUniqueInput!]
  disconnect: [SurveyWhereUniqueInput!]
  delete: [SurveyWhereUniqueInput!]
  update: [SurveyUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [SurveyUpsertWithWhereUniqueWithoutParentInput!]
}

input SurveyUpdateWithoutParentDataInput {
  score: Int
  answer: String
  question: QuestionUpdateOneInput
}

input SurveyUpdateWithWhereUniqueWithoutParentInput {
  where: SurveyWhereUniqueInput!
  data: SurveyUpdateWithoutParentDataInput!
}

input SurveyUpsertWithWhereUniqueWithoutParentInput {
  where: SurveyWhereUniqueInput!
  update: SurveyUpdateWithoutParentDataInput!
  create: SurveyCreateWithoutParentInput!
}

input SurveyWhereInput {
  """Logical AND on all given filters."""
  AND: [SurveyWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurveyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurveyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  parent: CourseWhereInput
  question: QuestionWhereInput
}

input SurveyWhereUniqueInput {
  id: ID
}

type Unit implements Node {
  id: ID!
  name: String!
  description: String!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject!]
}

"""A connection to a list of items."""
type UnitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnitEdge]!
  aggregate: AggregateUnit!
}

input UnitCreateInput {
  name: String!
  description: String!
  subSubjects: SubSubjectCreateManyWithoutUnitInput
}

input UnitCreateOneWithoutSubSubjectsInput {
  create: UnitCreateWithoutSubSubjectsInput
  connect: UnitWhereUniqueInput
}

input UnitCreateWithoutSubSubjectsInput {
  name: String!
  description: String!
}

"""An edge in a connection."""
type UnitEdge {
  """The item at the end of the edge."""
  node: Unit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UnitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UnitPreviousValues {
  id: ID!
  name: String!
  description: String!
}

type UnitSubscriptionPayload {
  mutation: MutationType!
  node: Unit
  updatedFields: [String!]
  previousValues: UnitPreviousValues
}

input UnitSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UnitSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnitSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnitSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UnitWhereInput
}

input UnitUpdateInput {
  name: String
  description: String
  subSubjects: SubSubjectUpdateManyWithoutUnitInput
}

input UnitUpdateOneWithoutSubSubjectsInput {
  create: UnitCreateWithoutSubSubjectsInput
  connect: UnitWhereUniqueInput
  delete: Boolean
  update: UnitUpdateWithoutSubSubjectsDataInput
  upsert: UnitUpsertWithoutSubSubjectsInput
}

input UnitUpdateWithoutSubSubjectsDataInput {
  name: String
  description: String
}

input UnitUpsertWithoutSubSubjectsInput {
  update: UnitUpdateWithoutSubSubjectsDataInput!
  create: UnitCreateWithoutSubSubjectsInput!
}

input UnitWhereInput {
  """Logical AND on all given filters."""
  AND: [UnitWhereInput!]

  """Logical OR on all given filters."""
  OR: [UnitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UnitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  subSubjects_every: SubSubjectWhereInput
  subSubjects_some: SubSubjectWhereInput
  subSubjects_none: SubSubjectWhereInput
}

input UnitWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom!]
  enrollment(where: EnrollmentWhereInput): Enrollment
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  classrooms: ClassroomCreateManyWithoutUsersInput
  enrollment: EnrollmentCreateOneWithoutStudentInput
}

input UserCreateManyWithoutClassroomsInput {
  create: [UserCreateWithoutClassroomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEnrollmentInput {
  create: UserCreateWithoutEnrollmentInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClassroomsInput {
  email: String!
  password: String!
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
}

input UserCreateWithoutEnrollmentInput {
  email: String!
  password: String!
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  classrooms: ClassroomCreateManyWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  fname_ASC
  fname_DESC
  lname_ASC
  lname_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  classrooms: ClassroomUpdateManyWithoutUsersInput
  enrollment: EnrollmentUpdateOneWithoutStudentInput
}

input UserUpdateManyWithoutClassroomsInput {
  create: [UserCreateWithoutClassroomsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutClassroomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutClassroomsInput!]
}

input UserUpdateOneWithoutEnrollmentInput {
  create: UserCreateWithoutEnrollmentInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutEnrollmentDataInput
  upsert: UserUpsertWithoutEnrollmentInput
}

input UserUpdateWithoutClassroomsDataInput {
  email: String
  password: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
}

input UserUpdateWithoutEnrollmentDataInput {
  email: String
  password: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  classrooms: ClassroomUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutClassroomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutClassroomsDataInput!
}

input UserUpsertWithoutEnrollmentInput {
  update: UserUpdateWithoutEnrollmentDataInput!
  create: UserCreateWithoutEnrollmentInput!
}

input UserUpsertWithWhereUniqueWithoutClassroomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutClassroomsDataInput!
  create: UserCreateWithoutClassroomsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  fname: String

  """All values that are not equal to given value."""
  fname_not: String

  """All values that are contained in given list."""
  fname_in: [String!]

  """All values that are not contained in given list."""
  fname_not_in: [String!]

  """All values less than the given value."""
  fname_lt: String

  """All values less than or equal the given value."""
  fname_lte: String

  """All values greater than the given value."""
  fname_gt: String

  """All values greater than or equal the given value."""
  fname_gte: String

  """All values containing the given string."""
  fname_contains: String

  """All values not containing the given string."""
  fname_not_contains: String

  """All values starting with the given string."""
  fname_starts_with: String

  """All values not starting with the given string."""
  fname_not_starts_with: String

  """All values ending with the given string."""
  fname_ends_with: String

  """All values not ending with the given string."""
  fname_not_ends_with: String
  lname: String

  """All values that are not equal to given value."""
  lname_not: String

  """All values that are contained in given list."""
  lname_in: [String!]

  """All values that are not contained in given list."""
  lname_not_in: [String!]

  """All values less than the given value."""
  lname_lt: String

  """All values less than or equal the given value."""
  lname_lte: String

  """All values greater than the given value."""
  lname_gt: String

  """All values greater than or equal the given value."""
  lname_gte: String

  """All values containing the given string."""
  lname_contains: String

  """All values not containing the given string."""
  lname_not_contains: String

  """All values starting with the given string."""
  lname_starts_with: String

  """All values not starting with the given string."""
  lname_not_starts_with: String

  """All values ending with the given string."""
  lname_ends_with: String

  """All values not ending with the given string."""
  lname_not_ends_with: String
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  classrooms_every: ClassroomWhereInput
  classrooms_some: ClassroomWhereInput
  classrooms_none: ClassroomWhereInput
  enrollment: EnrollmentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
