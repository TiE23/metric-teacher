# source: http://self:4466/server/dev
# timestamp: Wed Dec 05 2018 20:05:13 GMT-0800 (Pacific Standard Time)

type AggregateClassroom {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateEnrollment {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type AggregateMastery {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateSubSubject {
  count: Int!
}

type AggregateSurvey {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Classroom implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  studentCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type ClassroomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassroomEdge]!
  aggregate: AggregateClassroom!
}

input ClassroomCreateInput {
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  studentCourses: CourseCreateManyWithoutClassroomsInput
  teachers: UserCreateManyWithoutClassroomsTeachingInput
}

input ClassroomCreateManyWithoutStudentCoursesInput {
  create: [ClassroomCreateWithoutStudentCoursesInput!]
  connect: [ClassroomWhereUniqueInput!]
}

input ClassroomCreateManyWithoutTeachersInput {
  create: [ClassroomCreateWithoutTeachersInput!]
  connect: [ClassroomWhereUniqueInput!]
}

input ClassroomCreateWithoutStudentCoursesInput {
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  teachers: UserCreateManyWithoutClassroomsTeachingInput
}

input ClassroomCreateWithoutTeachersInput {
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  studentCourses: CourseCreateManyWithoutClassroomsInput
}

"""An edge in a connection."""
type ClassroomEdge {
  """The item at the end of the edge."""
  node: Classroom!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassroomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  notes_ASC
  notes_DESC
}

type ClassroomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
}

type ClassroomSubscriptionPayload {
  mutation: MutationType!
  node: Classroom
  updatedFields: [String!]
  previousValues: ClassroomPreviousValues
}

input ClassroomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassroomWhereInput
}

input ClassroomUpdateInput {
  name: String
  description: String
  status: Int
  flags: Int
  notes: String
  studentCourses: CourseUpdateManyWithoutClassroomsInput
  teachers: UserUpdateManyWithoutClassroomsTeachingInput
}

input ClassroomUpdateManyWithoutStudentCoursesInput {
  create: [ClassroomCreateWithoutStudentCoursesInput!]
  connect: [ClassroomWhereUniqueInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  delete: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutStudentCoursesInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutStudentCoursesInput!]
}

input ClassroomUpdateManyWithoutTeachersInput {
  create: [ClassroomCreateWithoutTeachersInput!]
  connect: [ClassroomWhereUniqueInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  delete: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutTeachersInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutTeachersInput!]
}

input ClassroomUpdateWithoutStudentCoursesDataInput {
  name: String
  description: String
  status: Int
  flags: Int
  notes: String
  teachers: UserUpdateManyWithoutClassroomsTeachingInput
}

input ClassroomUpdateWithoutTeachersDataInput {
  name: String
  description: String
  status: Int
  flags: Int
  notes: String
  studentCourses: CourseUpdateManyWithoutClassroomsInput
}

input ClassroomUpdateWithWhereUniqueWithoutStudentCoursesInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUpdateWithoutStudentCoursesDataInput!
}

input ClassroomUpdateWithWhereUniqueWithoutTeachersInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUpdateWithoutTeachersDataInput!
}

input ClassroomUpsertWithWhereUniqueWithoutStudentCoursesInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUpdateWithoutStudentCoursesDataInput!
  create: ClassroomCreateWithoutStudentCoursesInput!
}

input ClassroomUpsertWithWhereUniqueWithoutTeachersInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUpdateWithoutTeachersDataInput!
  create: ClassroomCreateWithoutTeachersInput!
}

input ClassroomWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  notes: String

  """All values that are not equal to given value."""
  notes_not: String

  """All values that are contained in given list."""
  notes_in: [String!]

  """All values that are not contained in given list."""
  notes_not_in: [String!]

  """All values less than the given value."""
  notes_lt: String

  """All values less than or equal the given value."""
  notes_lte: String

  """All values greater than the given value."""
  notes_gt: String

  """All values greater than or equal the given value."""
  notes_gte: String

  """All values containing the given string."""
  notes_contains: String

  """All values not containing the given string."""
  notes_not_contains: String

  """All values starting with the given string."""
  notes_starts_with: String

  """All values not starting with the given string."""
  notes_not_starts_with: String

  """All values ending with the given string."""
  notes_ends_with: String

  """All values not ending with the given string."""
  notes_not_ends_with: String
  studentCourses_every: CourseWhereInput
  studentCourses_some: CourseWhereInput
  studentCourses_none: CourseWhereInput
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
}

input ClassroomWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  flags: Int!
  parent: Enrollment!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom!]
  masteries(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery!]
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  classrooms: ClassroomCreateManyWithoutStudentCoursesInput
  masteries: MasteryCreateManyWithoutParentInput
  surveys: SurveyCreateManyWithoutParentInput
}

input CourseCreateManyWithoutClassroomsInput {
  create: [CourseCreateWithoutClassroomsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutParentInput {
  create: [CourseCreateWithoutParentInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutMasteriesInput {
  create: CourseCreateWithoutMasteriesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutSurveysInput {
  create: CourseCreateWithoutSurveysInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutClassroomsInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  masteries: MasteryCreateManyWithoutParentInput
  surveys: SurveyCreateManyWithoutParentInput
}

input CourseCreateWithoutMasteriesInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  classrooms: ClassroomCreateManyWithoutStudentCoursesInput
  surveys: SurveyCreateManyWithoutParentInput
}

input CourseCreateWithoutParentInput {
  status: Int!
  flags: Int!
  classrooms: ClassroomCreateManyWithoutStudentCoursesInput
  masteries: MasteryCreateManyWithoutParentInput
  surveys: SurveyCreateManyWithoutParentInput
}

input CourseCreateWithoutSurveysInput {
  status: Int!
  flags: Int!
  parent: EnrollmentCreateOneWithoutCoursesInput!
  classrooms: ClassroomCreateManyWithoutStudentCoursesInput
  masteries: MasteryCreateManyWithoutParentInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
}

type CoursePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  flags: Int!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneRequiredWithoutCoursesInput
  classrooms: ClassroomUpdateManyWithoutStudentCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
  surveys: SurveyUpdateManyWithoutParentInput
}

input CourseUpdateManyWithoutClassroomsInput {
  create: [CourseCreateWithoutClassroomsInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutClassroomsInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutClassroomsInput!]
}

input CourseUpdateManyWithoutParentInput {
  create: [CourseCreateWithoutParentInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutParentInput!]
}

input CourseUpdateOneRequiredWithoutMasteriesInput {
  create: CourseCreateWithoutMasteriesInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutMasteriesDataInput
  upsert: CourseUpsertWithoutMasteriesInput
}

input CourseUpdateOneRequiredWithoutSurveysInput {
  create: CourseCreateWithoutSurveysInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutSurveysDataInput
  upsert: CourseUpsertWithoutSurveysInput
}

input CourseUpdateWithoutClassroomsDataInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneRequiredWithoutCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
  surveys: SurveyUpdateManyWithoutParentInput
}

input CourseUpdateWithoutMasteriesDataInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneRequiredWithoutCoursesInput
  classrooms: ClassroomUpdateManyWithoutStudentCoursesInput
  surveys: SurveyUpdateManyWithoutParentInput
}

input CourseUpdateWithoutParentDataInput {
  status: Int
  flags: Int
  classrooms: ClassroomUpdateManyWithoutStudentCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
  surveys: SurveyUpdateManyWithoutParentInput
}

input CourseUpdateWithoutSurveysDataInput {
  status: Int
  flags: Int
  parent: EnrollmentUpdateOneRequiredWithoutCoursesInput
  classrooms: ClassroomUpdateManyWithoutStudentCoursesInput
  masteries: MasteryUpdateManyWithoutParentInput
}

input CourseUpdateWithWhereUniqueWithoutClassroomsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutClassroomsDataInput!
}

input CourseUpdateWithWhereUniqueWithoutParentInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutParentDataInput!
}

input CourseUpsertWithoutMasteriesInput {
  update: CourseUpdateWithoutMasteriesDataInput!
  create: CourseCreateWithoutMasteriesInput!
}

input CourseUpsertWithoutSurveysInput {
  update: CourseUpdateWithoutSurveysDataInput!
  create: CourseCreateWithoutSurveysInput!
}

input CourseUpsertWithWhereUniqueWithoutClassroomsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutClassroomsDataInput!
  create: CourseCreateWithoutClassroomsInput!
}

input CourseUpsertWithWhereUniqueWithoutParentInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutParentDataInput!
  create: CourseCreateWithoutParentInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  parent: EnrollmentWhereInput
  classrooms_every: ClassroomWhereInput
  classrooms_some: ClassroomWhereInput
  classrooms_none: ClassroomWhereInput
  masteries_every: MasteryWhereInput
  masteries_some: MasteryWhereInput
  masteries_none: MasteryWhereInput
  surveys_every: SurveyWhereInput
  surveys_some: SurveyWhereInput
  surveys_none: SurveyWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Enrollment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  student: User!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type EnrollmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnrollmentEdge]!
  aggregate: AggregateEnrollment!
}

input EnrollmentCreateInput {
  student: UserCreateOneWithoutEnrollmentInput!
  courses: CourseCreateManyWithoutParentInput
}

input EnrollmentCreateOneWithoutCoursesInput {
  create: EnrollmentCreateWithoutCoursesInput
  connect: EnrollmentWhereUniqueInput
}

input EnrollmentCreateOneWithoutStudentInput {
  create: EnrollmentCreateWithoutStudentInput
  connect: EnrollmentWhereUniqueInput
}

input EnrollmentCreateWithoutCoursesInput {
  student: UserCreateOneWithoutEnrollmentInput!
}

input EnrollmentCreateWithoutStudentInput {
  courses: CourseCreateManyWithoutParentInput
}

"""An edge in a connection."""
type EnrollmentEdge {
  """The item at the end of the edge."""
  node: Enrollment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EnrollmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EnrollmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EnrollmentSubscriptionPayload {
  mutation: MutationType!
  node: Enrollment
  updatedFields: [String!]
  previousValues: EnrollmentPreviousValues
}

input EnrollmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EnrollmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnrollmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnrollmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EnrollmentWhereInput
}

input EnrollmentUpdateInput {
  student: UserUpdateOneRequiredWithoutEnrollmentInput
  courses: CourseUpdateManyWithoutParentInput
}

input EnrollmentUpdateOneRequiredWithoutCoursesInput {
  create: EnrollmentCreateWithoutCoursesInput
  connect: EnrollmentWhereUniqueInput
  update: EnrollmentUpdateWithoutCoursesDataInput
  upsert: EnrollmentUpsertWithoutCoursesInput
}

input EnrollmentUpdateOneWithoutStudentInput {
  create: EnrollmentCreateWithoutStudentInput
  connect: EnrollmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EnrollmentUpdateWithoutStudentDataInput
  upsert: EnrollmentUpsertWithoutStudentInput
}

input EnrollmentUpdateWithoutCoursesDataInput {
  student: UserUpdateOneRequiredWithoutEnrollmentInput
}

input EnrollmentUpdateWithoutStudentDataInput {
  courses: CourseUpdateManyWithoutParentInput
}

input EnrollmentUpsertWithoutCoursesInput {
  update: EnrollmentUpdateWithoutCoursesDataInput!
  create: EnrollmentCreateWithoutCoursesInput!
}

input EnrollmentUpsertWithoutStudentInput {
  update: EnrollmentUpdateWithoutStudentDataInput!
  create: EnrollmentCreateWithoutStudentInput!
}

input EnrollmentWhereInput {
  """Logical AND on all given filters."""
  AND: [EnrollmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EnrollmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EnrollmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  student: UserWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input EnrollmentWhereUniqueInput {
  id: ID
}

type Feedback implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  text: String
  question: Question!
  author: User!
  reviewer: User
}

"""A connection to a list of items."""
type FeedbackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  type: Int!
  status: Int!
  text: String
  question: QuestionCreateOneWithoutFeedbackInput!
  author: UserCreateOneWithoutFeedbackWrittenInput!
  reviewer: UserCreateOneWithoutFeedbackReviewedInput
}

input FeedbackCreateManyWithoutAuthorInput {
  create: [FeedbackCreateWithoutAuthorInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateManyWithoutQuestionInput {
  create: [FeedbackCreateWithoutQuestionInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateManyWithoutReviewerInput {
  create: [FeedbackCreateWithoutReviewerInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateWithoutAuthorInput {
  type: Int!
  status: Int!
  text: String
  question: QuestionCreateOneWithoutFeedbackInput!
  reviewer: UserCreateOneWithoutFeedbackReviewedInput
}

input FeedbackCreateWithoutQuestionInput {
  type: Int!
  status: Int!
  text: String
  author: UserCreateOneWithoutFeedbackWrittenInput!
  reviewer: UserCreateOneWithoutFeedbackReviewedInput
}

input FeedbackCreateWithoutReviewerInput {
  type: Int!
  status: Int!
  text: String
  question: QuestionCreateOneWithoutFeedbackInput!
  author: UserCreateOneWithoutFeedbackWrittenInput!
}

"""An edge in a connection."""
type FeedbackEdge {
  """The item at the end of the edge."""
  node: Feedback!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  text_ASC
  text_DESC
}

type FeedbackPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  text: String
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedbackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedbackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedbackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
}

input FeedbackUpdateInput {
  type: Int
  status: Int
  text: String
  question: QuestionUpdateOneRequiredWithoutFeedbackInput
  author: UserUpdateOneRequiredWithoutFeedbackWrittenInput
  reviewer: UserUpdateOneWithoutFeedbackReviewedInput
}

input FeedbackUpdateManyWithoutAuthorInput {
  create: [FeedbackCreateWithoutAuthorInput!]
  connect: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  delete: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutAuthorInput!]
}

input FeedbackUpdateManyWithoutQuestionInput {
  create: [FeedbackCreateWithoutQuestionInput!]
  connect: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  delete: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutQuestionInput!]
}

input FeedbackUpdateManyWithoutReviewerInput {
  create: [FeedbackCreateWithoutReviewerInput!]
  connect: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  delete: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutReviewerInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutReviewerInput!]
}

input FeedbackUpdateWithoutAuthorDataInput {
  type: Int
  status: Int
  text: String
  question: QuestionUpdateOneRequiredWithoutFeedbackInput
  reviewer: UserUpdateOneWithoutFeedbackReviewedInput
}

input FeedbackUpdateWithoutQuestionDataInput {
  type: Int
  status: Int
  text: String
  author: UserUpdateOneRequiredWithoutFeedbackWrittenInput
  reviewer: UserUpdateOneWithoutFeedbackReviewedInput
}

input FeedbackUpdateWithoutReviewerDataInput {
  type: Int
  status: Int
  text: String
  question: QuestionUpdateOneRequiredWithoutFeedbackInput
  author: UserUpdateOneRequiredWithoutFeedbackWrittenInput
}

input FeedbackUpdateWithWhereUniqueWithoutAuthorInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutAuthorDataInput!
}

input FeedbackUpdateWithWhereUniqueWithoutQuestionInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutQuestionDataInput!
}

input FeedbackUpdateWithWhereUniqueWithoutReviewerInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutReviewerDataInput!
}

input FeedbackUpsertWithWhereUniqueWithoutAuthorInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutAuthorDataInput!
  create: FeedbackCreateWithoutAuthorInput!
}

input FeedbackUpsertWithWhereUniqueWithoutQuestionInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutQuestionDataInput!
  create: FeedbackCreateWithoutQuestionInput!
}

input FeedbackUpsertWithWhereUniqueWithoutReviewerInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutReviewerDataInput!
  create: FeedbackCreateWithoutReviewerInput!
}

input FeedbackWhereInput {
  """Logical AND on all given filters."""
  AND: [FeedbackWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeedbackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeedbackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  question: QuestionWhereInput
  author: UserWhereInput
  reviewer: UserWhereInput
}

input FeedbackWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mastery implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
  parent: Course!
  subSubject: SubSubject!
}

"""A connection to a list of items."""
type MasteryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MasteryEdge]!
  aggregate: AggregateMastery!
}

input MasteryCreateInput {
  status: Int!
  score: Int!
  parent: CourseCreateOneWithoutMasteriesInput!
  subSubject: SubSubjectCreateOneWithoutMasteriesInput!
}

input MasteryCreateManyWithoutParentInput {
  create: [MasteryCreateWithoutParentInput!]
  connect: [MasteryWhereUniqueInput!]
}

input MasteryCreateManyWithoutSubSubjectInput {
  create: [MasteryCreateWithoutSubSubjectInput!]
  connect: [MasteryWhereUniqueInput!]
}

input MasteryCreateWithoutParentInput {
  status: Int!
  score: Int!
  subSubject: SubSubjectCreateOneWithoutMasteriesInput!
}

input MasteryCreateWithoutSubSubjectInput {
  status: Int!
  score: Int!
  parent: CourseCreateOneWithoutMasteriesInput!
}

"""An edge in a connection."""
type MasteryEdge {
  """The item at the end of the edge."""
  node: Mastery!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MasteryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  score_ASC
  score_DESC
}

type MasteryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
}

type MasterySubscriptionPayload {
  mutation: MutationType!
  node: Mastery
  updatedFields: [String!]
  previousValues: MasteryPreviousValues
}

input MasterySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MasterySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasterySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasterySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MasteryWhereInput
}

input MasteryUpdateInput {
  status: Int
  score: Int
  parent: CourseUpdateOneRequiredWithoutMasteriesInput
  subSubject: SubSubjectUpdateOneRequiredWithoutMasteriesInput
}

input MasteryUpdateManyWithoutParentInput {
  create: [MasteryCreateWithoutParentInput!]
  connect: [MasteryWhereUniqueInput!]
  disconnect: [MasteryWhereUniqueInput!]
  delete: [MasteryWhereUniqueInput!]
  update: [MasteryUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [MasteryUpsertWithWhereUniqueWithoutParentInput!]
}

input MasteryUpdateManyWithoutSubSubjectInput {
  create: [MasteryCreateWithoutSubSubjectInput!]
  connect: [MasteryWhereUniqueInput!]
  disconnect: [MasteryWhereUniqueInput!]
  delete: [MasteryWhereUniqueInput!]
  update: [MasteryUpdateWithWhereUniqueWithoutSubSubjectInput!]
  upsert: [MasteryUpsertWithWhereUniqueWithoutSubSubjectInput!]
}

input MasteryUpdateWithoutParentDataInput {
  status: Int
  score: Int
  subSubject: SubSubjectUpdateOneRequiredWithoutMasteriesInput
}

input MasteryUpdateWithoutSubSubjectDataInput {
  status: Int
  score: Int
  parent: CourseUpdateOneRequiredWithoutMasteriesInput
}

input MasteryUpdateWithWhereUniqueWithoutParentInput {
  where: MasteryWhereUniqueInput!
  data: MasteryUpdateWithoutParentDataInput!
}

input MasteryUpdateWithWhereUniqueWithoutSubSubjectInput {
  where: MasteryWhereUniqueInput!
  data: MasteryUpdateWithoutSubSubjectDataInput!
}

input MasteryUpsertWithWhereUniqueWithoutParentInput {
  where: MasteryWhereUniqueInput!
  update: MasteryUpdateWithoutParentDataInput!
  create: MasteryCreateWithoutParentInput!
}

input MasteryUpsertWithWhereUniqueWithoutSubSubjectInput {
  where: MasteryWhereUniqueInput!
  update: MasteryUpdateWithoutSubSubjectDataInput!
  create: MasteryCreateWithoutSubSubjectInput!
}

input MasteryWhereInput {
  """Logical AND on all given filters."""
  AND: [MasteryWhereInput!]

  """Logical OR on all given filters."""
  OR: [MasteryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MasteryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  parent: CourseWhereInput
  subSubject: SubSubjectWhereInput
}

input MasteryWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createClassroom(data: ClassroomCreateInput!): Classroom!
  createEnrollment(data: EnrollmentCreateInput!): Enrollment!
  createCourse(data: CourseCreateInput!): Course!
  createMastery(data: MasteryCreateInput!): Mastery!
  createSurvey(data: SurveyCreateInput!): Survey!
  createSubject(data: SubjectCreateInput!): Subject!
  createSubSubject(data: SubSubjectCreateInput!): SubSubject!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  createQuestion(data: QuestionCreateInput!): Question!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateEnrollment(data: EnrollmentUpdateInput!, where: EnrollmentWhereUniqueInput!): Enrollment
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateMastery(data: MasteryUpdateInput!, where: MasteryWhereUniqueInput!): Mastery
  updateSurvey(data: SurveyUpdateInput!, where: SurveyWhereUniqueInput!): Survey
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateSubSubject(data: SubSubjectUpdateInput!, where: SubSubjectWhereUniqueInput!): SubSubject
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  deleteUser(where: UserWhereUniqueInput!): User
  deleteClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteMastery(where: MasteryWhereUniqueInput!): Mastery
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteSubSubject(where: SubSubjectWhereUniqueInput!): SubSubject
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertClassroom(where: ClassroomWhereUniqueInput!, create: ClassroomCreateInput!, update: ClassroomUpdateInput!): Classroom!
  upsertEnrollment(where: EnrollmentWhereUniqueInput!, create: EnrollmentCreateInput!, update: EnrollmentUpdateInput!): Enrollment!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertMastery(where: MasteryWhereUniqueInput!, create: MasteryCreateInput!, update: MasteryUpdateInput!): Mastery!
  upsertSurvey(where: SurveyWhereUniqueInput!, create: SurveyCreateInput!, update: SurveyUpdateInput!): Survey!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  upsertSubSubject(where: SubSubjectWhereUniqueInput!, create: SubSubjectCreateInput!, update: SubSubjectUpdateInput!): SubSubject!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyClassrooms(data: ClassroomUpdateInput!, where: ClassroomWhereInput): BatchPayload!
  updateManyEnrollments(data: EnrollmentUpdateInput!, where: EnrollmentWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput): BatchPayload!
  updateManyMasteries(data: MasteryUpdateInput!, where: MasteryWhereInput): BatchPayload!
  updateManySurveys(data: SurveyUpdateInput!, where: SurveyWhereInput): BatchPayload!
  updateManySubjects(data: SubjectUpdateInput!, where: SubjectWhereInput): BatchPayload!
  updateManySubSubjects(data: SubSubjectUpdateInput!, where: SubSubjectWhereInput): BatchPayload!
  updateManyFeedbacks(data: FeedbackUpdateInput!, where: FeedbackWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyClassrooms(where: ClassroomWhereInput): BatchPayload!
  deleteManyEnrollments(where: EnrollmentWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyMasteries(where: MasteryWhereInput): BatchPayload!
  deleteManySurveys(where: SurveyWhereInput): BatchPayload!
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  deleteManySubSubjects(where: SubSubjectWhereInput): BatchPayload!
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom]!
  enrollments(where: EnrollmentWhereInput, orderBy: EnrollmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Enrollment]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  masteries(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery]!
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject]!
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  user(where: UserWhereUniqueInput!): User
  classroom(where: ClassroomWhereUniqueInput!): Classroom
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  course(where: CourseWhereUniqueInput!): Course
  mastery(where: MasteryWhereUniqueInput!): Mastery
  survey(where: SurveyWhereUniqueInput!): Survey
  subject(where: SubjectWhereUniqueInput!): Subject
  subSubject(where: SubSubjectWhereUniqueInput!): SubSubject
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  question(where: QuestionWhereUniqueInput!): Question
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  classroomsConnection(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassroomConnection!
  enrollmentsConnection(where: EnrollmentWhereInput, orderBy: EnrollmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnrollmentConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  masteriesConnection(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MasteryConnection!
  surveysConnection(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyConnection!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  subSubjectsConnection(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubSubjectConnection!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubject!
  feedback(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  author: User
  reviewer: User
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubjectCreateOneWithoutQuestionsInput!
  feedback: FeedbackCreateManyWithoutQuestionInput
  author: UserCreateOneWithoutQuestionsWrittenInput
  reviewer: UserCreateOneWithoutQuestionsReviewedInput
}

input QuestionCreateManyWithoutAuthorInput {
  create: [QuestionCreateWithoutAuthorInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutParentInput {
  create: [QuestionCreateWithoutParentInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutReviewerInput {
  create: [QuestionCreateWithoutReviewerInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutFeedbackInput {
  create: QuestionCreateWithoutFeedbackInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAuthorInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubjectCreateOneWithoutQuestionsInput!
  feedback: FeedbackCreateManyWithoutQuestionInput
  reviewer: UserCreateOneWithoutQuestionsReviewedInput
}

input QuestionCreateWithoutFeedbackInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubjectCreateOneWithoutQuestionsInput!
  author: UserCreateOneWithoutQuestionsWrittenInput
  reviewer: UserCreateOneWithoutQuestionsReviewedInput
}

input QuestionCreateWithoutParentInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  feedback: FeedbackCreateManyWithoutQuestionInput
  author: UserCreateOneWithoutQuestionsWrittenInput
  reviewer: UserCreateOneWithoutQuestionsReviewedInput
}

input QuestionCreateWithoutReviewerInput {
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubjectCreateOneWithoutQuestionsInput!
  feedback: FeedbackCreateManyWithoutQuestionInput
  author: UserCreateOneWithoutQuestionsWrittenInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
  difficulty_ASC
  difficulty_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
  media_ASC
  media_DESC
}

type QuestionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneRequiredWithoutQuestionsInput
  feedback: FeedbackUpdateManyWithoutQuestionInput
  author: UserUpdateOneWithoutQuestionsWrittenInput
  reviewer: UserUpdateOneWithoutQuestionsReviewedInput
}

input QuestionUpdateInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneRequiredWithoutQuestionsInput
  feedback: FeedbackUpdateManyWithoutQuestionInput
  author: UserUpdateOneWithoutQuestionsWrittenInput
  reviewer: UserUpdateOneWithoutQuestionsReviewedInput
}

input QuestionUpdateManyWithoutAuthorInput {
  create: [QuestionCreateWithoutAuthorInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input QuestionUpdateManyWithoutParentInput {
  create: [QuestionCreateWithoutParentInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutParentInput!]
}

input QuestionUpdateManyWithoutReviewerInput {
  create: [QuestionCreateWithoutReviewerInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutReviewerInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutReviewerInput!]
}

input QuestionUpdateOneRequiredInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
}

input QuestionUpdateOneRequiredWithoutFeedbackInput {
  create: QuestionCreateWithoutFeedbackInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutFeedbackDataInput
  upsert: QuestionUpsertWithoutFeedbackInput
}

input QuestionUpdateWithoutAuthorDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneRequiredWithoutQuestionsInput
  feedback: FeedbackUpdateManyWithoutQuestionInput
  reviewer: UserUpdateOneWithoutQuestionsReviewedInput
}

input QuestionUpdateWithoutFeedbackDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneRequiredWithoutQuestionsInput
  author: UserUpdateOneWithoutQuestionsWrittenInput
  reviewer: UserUpdateOneWithoutQuestionsReviewedInput
}

input QuestionUpdateWithoutParentDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  feedback: FeedbackUpdateManyWithoutQuestionInput
  author: UserUpdateOneWithoutQuestionsWrittenInput
  reviewer: UserUpdateOneWithoutQuestionsReviewedInput
}

input QuestionUpdateWithoutReviewerDataInput {
  type: Int
  status: Int
  flags: Int
  difficulty: Int
  question: String
  answer: String
  media: String
  parent: SubSubjectUpdateOneRequiredWithoutQuestionsInput
  feedback: FeedbackUpdateManyWithoutQuestionInput
  author: UserUpdateOneWithoutQuestionsWrittenInput
}

input QuestionUpdateWithWhereUniqueWithoutAuthorInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAuthorDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutParentInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutParentDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutReviewerInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutReviewerDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithoutFeedbackInput {
  update: QuestionUpdateWithoutFeedbackDataInput!
  create: QuestionCreateWithoutFeedbackInput!
}

input QuestionUpsertWithWhereUniqueWithoutAuthorInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAuthorDataInput!
  create: QuestionCreateWithoutAuthorInput!
}

input QuestionUpsertWithWhereUniqueWithoutParentInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutParentDataInput!
  create: QuestionCreateWithoutParentInput!
}

input QuestionUpsertWithWhereUniqueWithoutReviewerInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutReviewerDataInput!
  create: QuestionCreateWithoutReviewerInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  media: String

  """All values that are not equal to given value."""
  media_not: String

  """All values that are contained in given list."""
  media_in: [String!]

  """All values that are not contained in given list."""
  media_not_in: [String!]

  """All values less than the given value."""
  media_lt: String

  """All values less than or equal the given value."""
  media_lte: String

  """All values greater than the given value."""
  media_gt: String

  """All values greater than or equal the given value."""
  media_gte: String

  """All values containing the given string."""
  media_contains: String

  """All values not containing the given string."""
  media_not_contains: String

  """All values starting with the given string."""
  media_starts_with: String

  """All values not starting with the given string."""
  media_not_starts_with: String

  """All values ending with the given string."""
  media_ends_with: String

  """All values not ending with the given string."""
  media_not_ends_with: String
  parent: SubSubjectWhereInput
  feedback_every: FeedbackWhereInput
  feedback_some: FeedbackWhereInput
  feedback_none: FeedbackWhereInput
  author: UserWhereInput
  reviewer: UserWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subject implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: Int!
  name: String!
  description: String!
  media: String
  measurementDescription: String!
  subSubjects(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject!]
}

"""A connection to a list of items."""
type SubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  index: Int!
  name: String!
  description: String!
  media: String
  measurementDescription: String!
  subSubjects: SubSubjectCreateManyWithoutParentInput
}

input SubjectCreateOneWithoutSubSubjectsInput {
  create: SubjectCreateWithoutSubSubjectsInput
  connect: SubjectWhereUniqueInput
}

input SubjectCreateWithoutSubSubjectsInput {
  index: Int!
  name: String!
  description: String!
  media: String
  measurementDescription: String!
}

"""An edge in a connection."""
type SubjectEdge {
  """The item at the end of the edge."""
  node: Subject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  index_ASC
  index_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  media_ASC
  media_DESC
  measurementDescription_ASC
  measurementDescription_DESC
}

type SubjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: Int!
  name: String!
  description: String!
  media: String
  measurementDescription: String!
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
}

input SubjectUpdateInput {
  index: Int
  name: String
  description: String
  media: String
  measurementDescription: String
  subSubjects: SubSubjectUpdateManyWithoutParentInput
}

input SubjectUpdateOneRequiredWithoutSubSubjectsInput {
  create: SubjectCreateWithoutSubSubjectsInput
  connect: SubjectWhereUniqueInput
  update: SubjectUpdateWithoutSubSubjectsDataInput
  upsert: SubjectUpsertWithoutSubSubjectsInput
}

input SubjectUpdateWithoutSubSubjectsDataInput {
  index: Int
  name: String
  description: String
  media: String
  measurementDescription: String
}

input SubjectUpsertWithoutSubSubjectsInput {
  update: SubjectUpdateWithoutSubSubjectsDataInput!
  create: SubjectCreateWithoutSubSubjectsInput!
}

input SubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  media: String

  """All values that are not equal to given value."""
  media_not: String

  """All values that are contained in given list."""
  media_in: [String!]

  """All values that are not contained in given list."""
  media_not_in: [String!]

  """All values less than the given value."""
  media_lt: String

  """All values less than or equal the given value."""
  media_lte: String

  """All values greater than the given value."""
  media_gt: String

  """All values greater than or equal the given value."""
  media_gte: String

  """All values containing the given string."""
  media_contains: String

  """All values not containing the given string."""
  media_not_contains: String

  """All values starting with the given string."""
  media_starts_with: String

  """All values not starting with the given string."""
  media_not_starts_with: String

  """All values ending with the given string."""
  media_ends_with: String

  """All values not ending with the given string."""
  media_not_ends_with: String
  measurementDescription: String

  """All values that are not equal to given value."""
  measurementDescription_not: String

  """All values that are contained in given list."""
  measurementDescription_in: [String!]

  """All values that are not contained in given list."""
  measurementDescription_not_in: [String!]

  """All values less than the given value."""
  measurementDescription_lt: String

  """All values less than or equal the given value."""
  measurementDescription_lte: String

  """All values greater than the given value."""
  measurementDescription_gt: String

  """All values greater than or equal the given value."""
  measurementDescription_gte: String

  """All values containing the given string."""
  measurementDescription_contains: String

  """All values not containing the given string."""
  measurementDescription_not_contains: String

  """All values starting with the given string."""
  measurementDescription_starts_with: String

  """All values not starting with the given string."""
  measurementDescription_not_starts_with: String

  """All values ending with the given string."""
  measurementDescription_ends_with: String

  """All values not ending with the given string."""
  measurementDescription_not_ends_with: String
  subSubjects_every: SubSubjectWhereInput
  subSubjects_some: SubSubjectWhereInput
  subSubjects_none: SubSubjectWhereInput
}

input SubjectWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  classroom(where: ClassroomSubscriptionWhereInput): ClassroomSubscriptionPayload
  enrollment(where: EnrollmentSubscriptionWhereInput): EnrollmentSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  mastery(where: MasterySubscriptionWhereInput): MasterySubscriptionPayload
  survey(where: SurveySubscriptionWhereInput): SurveySubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  subSubject(where: SubSubjectSubscriptionWhereInput): SubSubjectSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
}

type SubSubject implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  parent: Subject!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  masteries(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery!]
}

"""A connection to a list of items."""
type SubSubjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubSubjectEdge]!
  aggregate: AggregateSubSubject!
}

input SubSubjectCreateInput {
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
  masteries: MasteryCreateManyWithoutSubSubjectInput
}

input SubSubjectCreateManyWithoutParentInput {
  create: [SubSubjectCreateWithoutParentInput!]
  connect: [SubSubjectWhereUniqueInput!]
}

input SubSubjectCreateOneWithoutMasteriesInput {
  create: SubSubjectCreateWithoutMasteriesInput
  connect: SubSubjectWhereUniqueInput
}

input SubSubjectCreateOneWithoutQuestionsInput {
  create: SubSubjectCreateWithoutQuestionsInput
  connect: SubSubjectWhereUniqueInput
}

input SubSubjectCreateWithoutMasteriesInput {
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  questions: QuestionCreateManyWithoutParentInput
}

input SubSubjectCreateWithoutParentInput {
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  questions: QuestionCreateManyWithoutParentInput
  masteries: MasteryCreateManyWithoutSubSubjectInput
}

input SubSubjectCreateWithoutQuestionsInput {
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  parent: SubjectCreateOneWithoutSubSubjectsInput!
  masteries: MasteryCreateManyWithoutSubSubjectInput
}

"""An edge in a connection."""
type SubSubjectEdge {
  """The item at the end of the edge."""
  node: SubSubject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubSubjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  index_ASC
  index_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  media_ASC
  media_DESC
  toMetric_ASC
  toMetric_DESC
  rarity_ASC
  rarity_DESC
  scale_ASC
  scale_DESC
}

type SubSubjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: Int!
  name: String!
  description: String!
  media: String
  toMetric: Boolean!
  rarity: Int!
  scale: String!
}

type SubSubjectSubscriptionPayload {
  mutation: MutationType!
  node: SubSubject
  updatedFields: [String!]
  previousValues: SubSubjectPreviousValues
}

input SubSubjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubSubjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubSubjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubSubjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubSubjectWhereInput
}

input SubSubjectUpdateInput {
  index: Int
  name: String
  description: String
  media: String
  toMetric: Boolean
  rarity: Int
  scale: String
  parent: SubjectUpdateOneRequiredWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
  masteries: MasteryUpdateManyWithoutSubSubjectInput
}

input SubSubjectUpdateManyWithoutParentInput {
  create: [SubSubjectCreateWithoutParentInput!]
  connect: [SubSubjectWhereUniqueInput!]
  disconnect: [SubSubjectWhereUniqueInput!]
  delete: [SubSubjectWhereUniqueInput!]
  update: [SubSubjectUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [SubSubjectUpsertWithWhereUniqueWithoutParentInput!]
}

input SubSubjectUpdateOneRequiredWithoutMasteriesInput {
  create: SubSubjectCreateWithoutMasteriesInput
  connect: SubSubjectWhereUniqueInput
  update: SubSubjectUpdateWithoutMasteriesDataInput
  upsert: SubSubjectUpsertWithoutMasteriesInput
}

input SubSubjectUpdateOneRequiredWithoutQuestionsInput {
  create: SubSubjectCreateWithoutQuestionsInput
  connect: SubSubjectWhereUniqueInput
  update: SubSubjectUpdateWithoutQuestionsDataInput
  upsert: SubSubjectUpsertWithoutQuestionsInput
}

input SubSubjectUpdateWithoutMasteriesDataInput {
  index: Int
  name: String
  description: String
  media: String
  toMetric: Boolean
  rarity: Int
  scale: String
  parent: SubjectUpdateOneRequiredWithoutSubSubjectsInput
  questions: QuestionUpdateManyWithoutParentInput
}

input SubSubjectUpdateWithoutParentDataInput {
  index: Int
  name: String
  description: String
  media: String
  toMetric: Boolean
  rarity: Int
  scale: String
  questions: QuestionUpdateManyWithoutParentInput
  masteries: MasteryUpdateManyWithoutSubSubjectInput
}

input SubSubjectUpdateWithoutQuestionsDataInput {
  index: Int
  name: String
  description: String
  media: String
  toMetric: Boolean
  rarity: Int
  scale: String
  parent: SubjectUpdateOneRequiredWithoutSubSubjectsInput
  masteries: MasteryUpdateManyWithoutSubSubjectInput
}

input SubSubjectUpdateWithWhereUniqueWithoutParentInput {
  where: SubSubjectWhereUniqueInput!
  data: SubSubjectUpdateWithoutParentDataInput!
}

input SubSubjectUpsertWithoutMasteriesInput {
  update: SubSubjectUpdateWithoutMasteriesDataInput!
  create: SubSubjectCreateWithoutMasteriesInput!
}

input SubSubjectUpsertWithoutQuestionsInput {
  update: SubSubjectUpdateWithoutQuestionsDataInput!
  create: SubSubjectCreateWithoutQuestionsInput!
}

input SubSubjectUpsertWithWhereUniqueWithoutParentInput {
  where: SubSubjectWhereUniqueInput!
  update: SubSubjectUpdateWithoutParentDataInput!
  create: SubSubjectCreateWithoutParentInput!
}

input SubSubjectWhereInput {
  """Logical AND on all given filters."""
  AND: [SubSubjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubSubjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubSubjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  media: String

  """All values that are not equal to given value."""
  media_not: String

  """All values that are contained in given list."""
  media_in: [String!]

  """All values that are not contained in given list."""
  media_not_in: [String!]

  """All values less than the given value."""
  media_lt: String

  """All values less than or equal the given value."""
  media_lte: String

  """All values greater than the given value."""
  media_gt: String

  """All values greater than or equal the given value."""
  media_gte: String

  """All values containing the given string."""
  media_contains: String

  """All values not containing the given string."""
  media_not_contains: String

  """All values starting with the given string."""
  media_starts_with: String

  """All values not starting with the given string."""
  media_not_starts_with: String

  """All values ending with the given string."""
  media_ends_with: String

  """All values not ending with the given string."""
  media_not_ends_with: String
  toMetric: Boolean

  """All values that are not equal to given value."""
  toMetric_not: Boolean
  rarity: Int

  """All values that are not equal to given value."""
  rarity_not: Int

  """All values that are contained in given list."""
  rarity_in: [Int!]

  """All values that are not contained in given list."""
  rarity_not_in: [Int!]

  """All values less than the given value."""
  rarity_lt: Int

  """All values less than or equal the given value."""
  rarity_lte: Int

  """All values greater than the given value."""
  rarity_gt: Int

  """All values greater than or equal the given value."""
  rarity_gte: Int
  scale: String

  """All values that are not equal to given value."""
  scale_not: String

  """All values that are contained in given list."""
  scale_in: [String!]

  """All values that are not contained in given list."""
  scale_not_in: [String!]

  """All values less than the given value."""
  scale_lt: String

  """All values less than or equal the given value."""
  scale_lte: String

  """All values greater than the given value."""
  scale_gt: String

  """All values greater than or equal the given value."""
  scale_gte: String

  """All values containing the given string."""
  scale_contains: String

  """All values not containing the given string."""
  scale_not_contains: String

  """All values starting with the given string."""
  scale_starts_with: String

  """All values not starting with the given string."""
  scale_not_starts_with: String

  """All values ending with the given string."""
  scale_ends_with: String

  """All values not ending with the given string."""
  scale_not_ends_with: String
  parent: SubjectWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  masteries_every: MasteryWhereInput
  masteries_some: MasteryWhereInput
  masteries_none: MasteryWhereInput
}

input SubSubjectWhereUniqueInput {
  id: ID
  name: String
}

type Survey implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
  answer: String
  detail: String
  parent: Course!
  question: Question!
}

"""A connection to a list of items."""
type SurveyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyEdge]!
  aggregate: AggregateSurvey!
}

input SurveyCreateInput {
  status: Int!
  score: Int!
  answer: String
  detail: String
  parent: CourseCreateOneWithoutSurveysInput!
  question: QuestionCreateOneInput!
}

input SurveyCreateManyWithoutParentInput {
  create: [SurveyCreateWithoutParentInput!]
  connect: [SurveyWhereUniqueInput!]
}

input SurveyCreateWithoutParentInput {
  status: Int!
  score: Int!
  answer: String
  detail: String
  question: QuestionCreateOneInput!
}

"""An edge in a connection."""
type SurveyEdge {
  """The item at the end of the edge."""
  node: Survey!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SurveyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  score_ASC
  score_DESC
  answer_ASC
  answer_DESC
  detail_ASC
  detail_DESC
}

type SurveyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
  answer: String
  detail: String
}

type SurveySubscriptionPayload {
  mutation: MutationType!
  node: Survey
  updatedFields: [String!]
  previousValues: SurveyPreviousValues
}

input SurveySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SurveySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurveySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurveySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SurveyWhereInput
}

input SurveyUpdateInput {
  status: Int
  score: Int
  answer: String
  detail: String
  parent: CourseUpdateOneRequiredWithoutSurveysInput
  question: QuestionUpdateOneRequiredInput
}

input SurveyUpdateManyWithoutParentInput {
  create: [SurveyCreateWithoutParentInput!]
  connect: [SurveyWhereUniqueInput!]
  disconnect: [SurveyWhereUniqueInput!]
  delete: [SurveyWhereUniqueInput!]
  update: [SurveyUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [SurveyUpsertWithWhereUniqueWithoutParentInput!]
}

input SurveyUpdateWithoutParentDataInput {
  status: Int
  score: Int
  answer: String
  detail: String
  question: QuestionUpdateOneRequiredInput
}

input SurveyUpdateWithWhereUniqueWithoutParentInput {
  where: SurveyWhereUniqueInput!
  data: SurveyUpdateWithoutParentDataInput!
}

input SurveyUpsertWithWhereUniqueWithoutParentInput {
  where: SurveyWhereUniqueInput!
  update: SurveyUpdateWithoutParentDataInput!
  create: SurveyCreateWithoutParentInput!
}

input SurveyWhereInput {
  """Logical AND on all given filters."""
  AND: [SurveyWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurveyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurveyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  detail: String

  """All values that are not equal to given value."""
  detail_not: String

  """All values that are contained in given list."""
  detail_in: [String!]

  """All values that are not contained in given list."""
  detail_not_in: [String!]

  """All values less than the given value."""
  detail_lt: String

  """All values less than or equal the given value."""
  detail_lte: String

  """All values greater than the given value."""
  detail_gt: String

  """All values greater than or equal the given value."""
  detail_gte: String

  """All values containing the given string."""
  detail_contains: String

  """All values not containing the given string."""
  detail_not_contains: String

  """All values starting with the given string."""
  detail_starts_with: String

  """All values not starting with the given string."""
  detail_not_starts_with: String

  """All values ending with the given string."""
  detail_ends_with: String

  """All values not ending with the given string."""
  detail_not_ends_with: String
  parent: CourseWhereInput
  question: QuestionWhereInput
}

input SurveyWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: Enrollment
  classroomsTeaching(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom!]
  feedbackWritten(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  feedbackReviewed(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  questionsWritten(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionsReviewed(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

input UserCreateManyWithoutClassroomsTeachingInput {
  create: [UserCreateWithoutClassroomsTeachingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEnrollmentInput {
  create: UserCreateWithoutEnrollmentInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFeedbackReviewedInput {
  create: UserCreateWithoutFeedbackReviewedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFeedbackWrittenInput {
  create: UserCreateWithoutFeedbackWrittenInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsReviewedInput {
  create: UserCreateWithoutQuestionsReviewedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsWrittenInput {
  create: UserCreateWithoutQuestionsWrittenInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClassroomsTeachingInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

input UserCreateWithoutEnrollmentInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

input UserCreateWithoutFeedbackReviewedInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

input UserCreateWithoutFeedbackWrittenInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

input UserCreateWithoutQuestionsReviewedInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsWritten: QuestionCreateManyWithoutAuthorInput
}

input UserCreateWithoutQuestionsWrittenInput {
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: EnrollmentCreateOneWithoutStudentInput
  classroomsTeaching: ClassroomCreateManyWithoutTeachersInput
  feedbackWritten: FeedbackCreateManyWithoutAuthorInput
  feedbackReviewed: FeedbackCreateManyWithoutReviewerInput
  questionsReviewed: QuestionCreateManyWithoutReviewerInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  honorific_ASC
  honorific_DESC
  fname_ASC
  fname_DESC
  lname_ASC
  lname_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  flags_ASC
  flags_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateManyWithoutClassroomsTeachingInput {
  create: [UserCreateWithoutClassroomsTeachingInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutClassroomsTeachingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutClassroomsTeachingInput!]
}

input UserUpdateOneRequiredWithoutEnrollmentInput {
  create: UserCreateWithoutEnrollmentInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutEnrollmentDataInput
  upsert: UserUpsertWithoutEnrollmentInput
}

input UserUpdateOneRequiredWithoutFeedbackWrittenInput {
  create: UserCreateWithoutFeedbackWrittenInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFeedbackWrittenDataInput
  upsert: UserUpsertWithoutFeedbackWrittenInput
}

input UserUpdateOneWithoutFeedbackReviewedInput {
  create: UserCreateWithoutFeedbackReviewedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutFeedbackReviewedDataInput
  upsert: UserUpsertWithoutFeedbackReviewedInput
}

input UserUpdateOneWithoutQuestionsReviewedInput {
  create: UserCreateWithoutQuestionsReviewedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionsReviewedDataInput
  upsert: UserUpsertWithoutQuestionsReviewedInput
}

input UserUpdateOneWithoutQuestionsWrittenInput {
  create: UserCreateWithoutQuestionsWrittenInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionsWrittenDataInput
  upsert: UserUpsertWithoutQuestionsWrittenInput
}

input UserUpdateWithoutClassroomsTeachingDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateWithoutEnrollmentDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateWithoutFeedbackReviewedDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateWithoutFeedbackWrittenDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateWithoutQuestionsReviewedDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsWritten: QuestionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutQuestionsWrittenDataInput {
  email: String
  password: String
  honorific: String
  fname: String
  lname: String
  type: Int
  status: Int
  flags: Int
  enrollment: EnrollmentUpdateOneWithoutStudentInput
  classroomsTeaching: ClassroomUpdateManyWithoutTeachersInput
  feedbackWritten: FeedbackUpdateManyWithoutAuthorInput
  feedbackReviewed: FeedbackUpdateManyWithoutReviewerInput
  questionsReviewed: QuestionUpdateManyWithoutReviewerInput
}

input UserUpdateWithWhereUniqueWithoutClassroomsTeachingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutClassroomsTeachingDataInput!
}

input UserUpsertWithoutEnrollmentInput {
  update: UserUpdateWithoutEnrollmentDataInput!
  create: UserCreateWithoutEnrollmentInput!
}

input UserUpsertWithoutFeedbackReviewedInput {
  update: UserUpdateWithoutFeedbackReviewedDataInput!
  create: UserCreateWithoutFeedbackReviewedInput!
}

input UserUpsertWithoutFeedbackWrittenInput {
  update: UserUpdateWithoutFeedbackWrittenDataInput!
  create: UserCreateWithoutFeedbackWrittenInput!
}

input UserUpsertWithoutQuestionsReviewedInput {
  update: UserUpdateWithoutQuestionsReviewedDataInput!
  create: UserCreateWithoutQuestionsReviewedInput!
}

input UserUpsertWithoutQuestionsWrittenInput {
  update: UserUpdateWithoutQuestionsWrittenDataInput!
  create: UserCreateWithoutQuestionsWrittenInput!
}

input UserUpsertWithWhereUniqueWithoutClassroomsTeachingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutClassroomsTeachingDataInput!
  create: UserCreateWithoutClassroomsTeachingInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  honorific: String

  """All values that are not equal to given value."""
  honorific_not: String

  """All values that are contained in given list."""
  honorific_in: [String!]

  """All values that are not contained in given list."""
  honorific_not_in: [String!]

  """All values less than the given value."""
  honorific_lt: String

  """All values less than or equal the given value."""
  honorific_lte: String

  """All values greater than the given value."""
  honorific_gt: String

  """All values greater than or equal the given value."""
  honorific_gte: String

  """All values containing the given string."""
  honorific_contains: String

  """All values not containing the given string."""
  honorific_not_contains: String

  """All values starting with the given string."""
  honorific_starts_with: String

  """All values not starting with the given string."""
  honorific_not_starts_with: String

  """All values ending with the given string."""
  honorific_ends_with: String

  """All values not ending with the given string."""
  honorific_not_ends_with: String
  fname: String

  """All values that are not equal to given value."""
  fname_not: String

  """All values that are contained in given list."""
  fname_in: [String!]

  """All values that are not contained in given list."""
  fname_not_in: [String!]

  """All values less than the given value."""
  fname_lt: String

  """All values less than or equal the given value."""
  fname_lte: String

  """All values greater than the given value."""
  fname_gt: String

  """All values greater than or equal the given value."""
  fname_gte: String

  """All values containing the given string."""
  fname_contains: String

  """All values not containing the given string."""
  fname_not_contains: String

  """All values starting with the given string."""
  fname_starts_with: String

  """All values not starting with the given string."""
  fname_not_starts_with: String

  """All values ending with the given string."""
  fname_ends_with: String

  """All values not ending with the given string."""
  fname_not_ends_with: String
  lname: String

  """All values that are not equal to given value."""
  lname_not: String

  """All values that are contained in given list."""
  lname_in: [String!]

  """All values that are not contained in given list."""
  lname_not_in: [String!]

  """All values less than the given value."""
  lname_lt: String

  """All values less than or equal the given value."""
  lname_lte: String

  """All values greater than the given value."""
  lname_gt: String

  """All values greater than or equal the given value."""
  lname_gte: String

  """All values containing the given string."""
  lname_contains: String

  """All values not containing the given string."""
  lname_not_contains: String

  """All values starting with the given string."""
  lname_starts_with: String

  """All values not starting with the given string."""
  lname_not_starts_with: String

  """All values ending with the given string."""
  lname_ends_with: String

  """All values not ending with the given string."""
  lname_not_ends_with: String
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  flags: Int

  """All values that are not equal to given value."""
  flags_not: Int

  """All values that are contained in given list."""
  flags_in: [Int!]

  """All values that are not contained in given list."""
  flags_not_in: [Int!]

  """All values less than the given value."""
  flags_lt: Int

  """All values less than or equal the given value."""
  flags_lte: Int

  """All values greater than the given value."""
  flags_gt: Int

  """All values greater than or equal the given value."""
  flags_gte: Int
  enrollment: EnrollmentWhereInput
  classroomsTeaching_every: ClassroomWhereInput
  classroomsTeaching_some: ClassroomWhereInput
  classroomsTeaching_none: ClassroomWhereInput
  feedbackWritten_every: FeedbackWhereInput
  feedbackWritten_some: FeedbackWhereInput
  feedbackWritten_none: FeedbackWhereInput
  feedbackReviewed_every: FeedbackWhereInput
  feedbackReviewed_some: FeedbackWhereInput
  feedbackReviewed_none: FeedbackWhereInput
  questionsWritten_every: QuestionWhereInput
  questionsWritten_some: QuestionWhereInput
  questionsWritten_none: QuestionWhereInput
  questionsReviewed_every: QuestionWhereInput
  questionsReviewed_some: QuestionWhereInput
  questionsReviewed_none: QuestionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
