# import Classroom, Enrollment from "./generated/prisma.graphql"

### Queries
type Query {
  # User Queries
  me: PrivateUser
  user(userid: ID!): PrivateUser
  users(userids: [ID!]!): [PrivateUser]!
  userSearch(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PrivateUser]!

  # Classroom Queries
  classroom(classroomid: ID!): Classroom
  classrooms(classroomids: [ID!]!): [Classroom]!
  classroomSearch(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom]!

  # Course Queries
  activeCourse(studentid: ID!): Course
  course(studentid: ID!, courseid: ID!): Course
  courses(studentid: ID!, courseids: [ID!]!): [Course]!
  courseSearch(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!

  # Mastery Queries
  activeMasteries(studentid: ID!): [Mastery]!
  mastery(studentid: ID!, masteryid: ID!): Mastery
  masteries(studentid: ID!, masteryids: [ID!]!): [Mastery]!
  masterySearch(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery]!

  # Subject Queries
  allSubjects: [Subject]!
  subject(subjectid: ID!): Subject
  subjects(subjectids: [ID!]!): [Subject]!
  subjectSearch(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!

  # SubSubject Queries
  allSubSubjects: [SubSubject]!
  subSubject(subsubjectid: ID!): SubSubject
  subSubjects(subsubjectids: [ID!]!): [SubSubject]!
  subSubjectSearch(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject]!

  # Survey Queries
  activeSurveys(studentid: ID!): [Survey]!
  survey(studentid: ID!, surveyid: ID!): Survey
  surveys(studentid: ID!, surveyids: [ID!]!): [Survey]!
  surveySearch(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!

  # Question Queries
  question(questionid: ID!): Question
  questions(questionids: [ID!]!): [Question]!
  questionSearch(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!

  # QA Queries
  generateChallenge(courseid: ID!, subjectids: [ID], subsubjectids: [ID], listSize: Int!, ignorerarity: Boolean, ignoredifficulty: Boolean, ignorepreference: Boolean): [QaObject]!
  getQa(questionid: ID!): QaObject
}

### Mutations
type Mutation {
  # User Mutations
  signup(email: String!, password: String!, fname: String!, lname: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # Student Mutations
  ## Enrollment
  enrollStudent(studentid: ID!): Enrollment!
  ## Course
  assignStudentNewCourse(studentid: ID!, prefermetric: Boolean): Course!
  setActiveCourse(studentid: ID!, courseid: ID!): Course!

  # Course Mutations
  ## Deactivate
  deactivateCourse(studentid: ID!, courseid: ID!): Course!
  ## SubSubjects
  assignCourseNewSubSubjects(studentid: ID!, courseid: ID!, subsubjects: [ID!]!): Course!

  # Mastery Mutations
  ## Activate/Deactivate
  activateMastery(studentid: ID!, masteryid: ID!): Mastery!
  deactivateMastery(studentid: ID!, masteryid: ID!): Mastery!

  # Classroom Mutations
  ## Make classroom
  createClassroom(name: String!, description: String, teacherid: ID!): Classroom!
  ## Add to Classroom
  addUsersToClassroom(classroomid: ID!, userids: [ID!]!): Classroom!
  ## Remove from Classroom
  removeUsersFromClassroom(classroomid: ID!, userids: [ID!]!): Classroom!

  # Survey Mutations
  ## answerSurvey
  answerSurvey(studentid: ID!, courseid: ID!, questionid: ID!, skip: Boolean, value: Float, unit: String, detail: String): Survey!
}

type AuthPayload {
  token: String!
  user: User!
}

# For public-ish use. It does not expose password, email, enrollment, or classroomsTeaching.
# It does, however, expose first and last names. So take note about ever making this truly public.
type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
}

# For private use. It does not expose password.
type PrivateUser {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: Enrollment
  classroomsTeaching: [Classroom!]!
}

### QA Object data schema and its numerous children below
## Parent Object
type QaObject {
  questionId: ID!
  subSubjectId: ID!
  difficulty: Int!
  flags: Int!
  media: String
  question: QaQuestionObject!
  answer: QaAnswerObject!
}

## Child Objects
type QaQuestionObject {
  detail: String!
  text: String!
  type: Int!
  data: QaQuestionData                    # Conversion + Survey Questions only
}

type QaAnswerObject {
  detail: String!
  type: Int!
  data: QaAnswerData!
}

## Grand Child Objects
type QaQuestionData {
  fromUnitWord: QaUnitWordObject!
  conversion: QaConversionQuestionObject  # Conversion Questions Only
  survey: QaSurveyQuestionObject          # Survey Questions Only
}

type QaAnswerData {
  toUnitWord: QaUnitWordObject            # Conversion and Survey Questions Only
  multiple: QaMultipleChoiceObject        # Written Questions Only
  conversion: QaConversionObject          # Conversion and Survey Questions Only
  survey: QaSurveyAnswerObject            # Survey Questions when survey completed Only
}

## Great Grand Child Question Objects
type QaConversionQuestionObject {
  exact: QaUnitObject!
  step: Float!
}

type QaSurveyQuestionObject {
  step: Float!
  surveyRange: QaRangeObject!
  response: QaSurveyResponseObject        # Only if survey was answered
}

## Great Grand Child Answer Objects
type QaMultipleChoiceObject {
  choicesOffered: Int!
  choices: [QaMixedUnitObject]!
}

type QaConversionObject {
  accuracy: Float!
  range: QaRangeObject!
  exact: Float!
  rounded: Float!
  friendly: Float!
  choices: [QaUnitObject]!
}

type QaSurveyAnswerObject {
  choices: [QaUnitObject]!
}

type QaSurveyResponseObject {
  id: ID!
  score: Int!
  answer: QaUnitObject!
  detail: String
}

## Generic Objects
type QaUnitWordObject {
  plural: String!
  singular: String!
}

type QaRangeObject {
  bottom: QaUnitObject!
  top: QaUnitObject!
}

# For Conversion and Survey questions where only number answers are possible
type QaUnitObject {
  value: Float!
  unit: String!
}

# Only used for Written questions where number and string answers are possible
type QaMixedUnitObject {
  value: Float    # For number answers
  written: String # For string answers
  unit: String!   # Always defined
}
