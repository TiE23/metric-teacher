# import Classroom, Enrollment from "./generated/prisma.graphql"

### Queries
type Query {
  # User Queries
  me: PrivateUser
  user(userid: ID!): PrivateUser
  users(userids: [ID!]!): [PrivateUser]!
  userSearch(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PrivateUser]!

  # Classroom Queries
  classroom(classroomid: ID!): Classroom
  classrooms(classroomids: [ID!]!): [Classroom]!
  classroomSearch(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom]!

  # Course Queries
  activeCourse(studentid: ID!): Course
  course(courseid: ID!): Course
  courses(courseids: [ID!]!): [Course]!
  courseSearch(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!

  # Mastery Queries
  activeMasteries(studentid: ID!): [Mastery]!
  mastery(masteryid: ID!): Mastery
  masteries(masteryids: [ID!]!): [Mastery]!
  masterySearch(where: MasteryWhereInput, orderBy: MasteryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mastery]!

  # Subject Queries
  allSubjects: [Subject]!
  subject(subjectid: ID!): Subject
  subjects(subjectids: [ID!]!): [Subject]!
  subjectSearch(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!

  # SubSubject Queries
  allSubSubjects: [SubSubject]!
  subSubject(subsubjectid: ID!): SubSubject
  subSubjects(subsubjectids: [ID!]!): [SubSubject]!
  subSubjectSearch(where: SubSubjectWhereInput, orderBy: SubSubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubSubject]!

  # Survey Queries
  activeSurveys(studentid: ID!): [Survey]!
  survey(surveyid: ID!): Survey
  surveys(surveyids: [ID!]!): [Survey]!
  surveySearch(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!

  # Question Queries
  question(questionid: ID!): Question
  questions(questionids: [ID!]!): [Question]!
  questionSearch(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  checkSubmitQuestion(type: Int!, questioninput: QuestionQuestionInput!, answerinput: QuestionAnswerInput!): Boolean!

  # Feedback Queries
  feedbackSearch(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!

  # QA Queries
  generateChallenge(studentid: ID!, subjectids: [ID], subsubjectids: [ID], listsize: Int!, ignorerarity: Boolean, ignoredifficulty: Boolean, ignorepreference: Boolean): [QaObject]!
  getQa(questionids: [ID!]!, studentid: ID): [QaObject]!

  # Other Queries
  ping: String!
}

### Mutations
type Mutation {
  # Auth Mutations
  signup(email: String!, password: String!, fname: String, lname: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # User Mutations
  updateUserProfile(userid: ID!, email: String, password: PasswordInput, honorific: String, fname: String, lname: String): PrivateUser!
  updateUserStates(userid: ID!, type: Int, status: Int, flags: Int): PrivateUser!

  # Enrollment Mutations
  enrollStudent(studentid: ID!): Enrollment!

  # Course Mutations
  assignStudentNewCourse(studentid: ID!, prefermetric: Boolean): Course!
  setActiveCourse(studentid: ID!, courseid: ID!): Course!
  assignStudentNewMasteries(studentid: ID!, subsubjectids: [ID!]!): Course!
  deactivateCourse(courseid: ID!): Course!
  updateCourseFlags(courseid: ID!, flags: Int!): Course!
  addMasteryScores(studentid: ID!, scoreinput: [MasteryScoreInput!]!): Course!
  addSurveyScores(studentid: ID!, scoreinput: [SurveyScoreInput!]!): Course!
  addSurveyAnswers(studentid: ID!, answerinput: [SurveyAnswerInput!]!): Course!
  addChallengeResults(studentid: ID!, masteryscoreinput: [MasteryScoreInput]!, surveyscoreinput: [SurveyScoreInput]!, surveyanswerinput: [SurveyAnswerInput]!): Course!

  # Mastery Mutations
  assignStudentNewMastery(studentid: ID!, subsubjectid: ID!): Mastery!
  updateMasteryStatus(masteryid: ID!, status: Int!): Mastery!
  addMasteryScore(masteryid: ID!, score: Int!): Mastery!

  # Classroom Mutations
  createClassroom(name: String!, description: String, teacherid: ID!): Classroom!
  addUsersToClassroom(classroomid: ID!, userids: [ID!]!): Classroom!
  removeUsersFromClassroom(classroomid: ID!, userids: [ID!]!): Classroom!

  # Survey Mutations
  addSurveyAnswer(studentid: ID!, answerinput: SurveyAnswerInput!): Survey!
  updateSurveyStatus(surveyid: ID!, status: Int!): Survey!
  addSurveyScore(surveyid: ID!, score: Int!): Survey!

  # Question Mutations
  submitQuestion(subsubjectid: ID!, type: Int!, flags: Int!, difficulty: Int!, media: String, questioninput: QuestionQuestionInput!, answerinput: QuestionAnswerInput!): Question!
  updateQuestion(questionid: ID!, subsubjectid: ID, type: Int, flags: Int, status: Int, difficulty: Int, media: String, questioninput: QuestionQuestionInput, answerinput: QuestionAnswerInput): Question!

  # Feedback Mutations
  submitFeedback(questionid: ID!, type: Int!, text: String): Feedback!
  updateFeedbackStatus(feedbackid: ID!, status: Int!): Feedback!
}

### Inputs
input PasswordInput {
  new: String
  old: String
}

input MasteryScoreInput {
  subsubjectid: ID!
  score: Int!
}

input SurveyScoreInput {
  surveyid: ID!
  score: Int!
}

input SurveyAnswerInput {
  questionid: ID!
  skip: Boolean
  value: Float
  unit: String
  score: Int
  detail: String
}

input QuestionQuestionInput {
  text: String
  rangeinput: QuestionQuestionRangeInput
}

input QuestionQuestionRangeInput {
  lower: Float!
  upper: Float!
  unit: String!
  step: Float
}

input QuestionAnswerInput {
  detail: String
  multiplechoiceinput: QuestionAnswerMultipleChoiceInput
  conversioninput: ConversionAnswerInput
}

input QuestionAnswerMultipleChoiceInput {
  choices: [ChoiceInputRow!]!
  choicesoffered: Int
}

input ChoiceInputRow {
  value: Float
  written: String
  unit: String!
}

input ConversionAnswerInput {
  unit: String!
  accuracy: Float
}

### Types
type AuthPayload {
  token: String!
  user: PrivateUser!
}

# For public-ish use. It does not expose password, email, enrollment, or classroomsTeaching.
# It does, however, expose first and last names. So take note about ever making this truly public.
type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  honorific: String
  fname: String
  lname: String
  type: Int!
  status: Int!
  flags: Int!
}

# For private use. It does not expose password.
type PrivateUser implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  honorific: String
  fname: String
  lname: String
  type: Int!
  status: Int!
  flags: Int!
  enrollment: Enrollment
  classroomsTeaching: [Classroom!]!
  feedbackWritten: [Feedback!]!
  feedbackReviewed: [Feedback!]!
  questionsWritten: [Question!]!
  questionsReviewed: [Question!]!
}

### QA Object data schema and its numerous children below
## Parent Object
type QaObject {
  id: ID!
  questionId: ID!
  subSubjectId: ID!
  difficulty: Int!
  flags: Int!
  status: Int!
  media: String
  subject: QaSubjectObject!
  question: QaQuestionObject!
  answer: QaAnswerObject!
}

## Child Objects
type QaSubjectObject {
  name: String!
  scale: String!
  toMetric: Boolean!
}

type QaQuestionObject {
  detail: String!
  text: String!
  type: Int!
  data: QaQuestionData                    # Conversion + Survey Questions only
}

type QaAnswerObject {
  detail: String!
  type: Int!
  data: QaAnswerData!
}

## Grand Child Objects
type QaQuestionData {
  fromUnitWord: QaUnitWordObject!
  conversion: QaConversionQuestionObject  # Conversion Questions Only
  survey: QaSurveyQuestionObject          # Survey Questions Only
}

type QaAnswerData {
  accuracy: Float                         # Conversion and Survey Questions Only
  unit: String                            # Conversion and Survey Questions Only
  toUnitWord: QaUnitWordObject            # Conversion and Survey Questions Only
  multiple: QaMultipleChoiceObject        # Written Questions Only
  conversion: QaConversionObject          # Conversion and Survey Questions Only
  survey: QaSurveyAnswerObject            # Survey Questions when survey completed Only
}

## Great Grand Child Question Objects
type QaConversionQuestionObject {
  step: Float!
  range: QaRangeObject!
  exact: QaUnitObject!
}

type QaSurveyQuestionObject {
  step: Float!
  range: QaRangeObject!
  response: QaSurveyResponseObject        # Only if survey was answered
}

## Great Grand Child Answer Objects
type QaMultipleChoiceObject {
  choicesOffered: Int!
  choices: [QaMixedUnitObject]!
}

type QaConversionObject {
  range: QaRangeObject!
  exact: Float!
  rounded: Float!
  friendly: Float!
  choices: [QaUnitObject]!
}

type QaSurveyAnswerObject {
  choices: [QaUnitObject]!
}

## Great Great Grand Child Question Objects
type QaSurveyResponseObject {
  surveyId: ID!
  status: Int!
  score: Int!
  answer: QaUnitObject
  detail: String
}

## Leaf Objects
type QaUnitWordObject {
  plural: String!
  singular: String!
}

type QaRangeObject {
  bottom: QaUnitObject!
  top: QaUnitObject!
}

# For Conversion and Survey questions where only number answers are possible
type QaUnitObject {
  value: Float!
  unit: String!
}

# Only used for Written questions where number and string answers are possible
type QaMixedUnitObject {
  value: Float    # For number answers
  written: String # For string answers
  unit: String!   # Always defined
}
