# Users can be students (normal account), teachers, moderators, or admins
type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @unique
  password: String!
  honorific: String
  fname: String!
  lname: String!
  type: Int!
  status: Int!
  flags: Int!
  enrollment: Enrollment @relation(name: "UserToEnrollment")
  classroomsTeaching: [Classroom!]! @relation(name: "UserToClassroom")
  feedbackWritten: [Feedback!]! @relation(name: "UserToFeedback")
  feedbackReviewed: [Feedback!]! @relation(name: "ReviewerToFeedback")
  questionsWritten: [Question!]! @relation(name: "UserToQuestion")
  questionsReviewed: [Question!]! @relation(name: "ReviewerToQuestion")
}

# This is a structure that will allow teacher(s) to connect to their students and students to
# connect to each other.
type Classroom {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  status: Int!
  flags: Int!
  notes: String!
  studentCourses: [Course!]! @relation(name: "CourseToClassroom")
  teachers: [User!]! @relation(name: "UserToClassroom")
}

# A student has a single enrollment row. An enrollment is their place in the school.
type Enrollment {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  student: User! @relation(name: "UserToEnrollment")
  courses: [Course!]! @relation(name: "EnrollmentToCourse")
}

# An enrolled student has courses. This form allows me to provide an opportunity for a student
# who has fallen behind to restart their progress on the website without deleting everything, or,
# perhaps, to follow a different curriculum of sorts.
# The typical student will have only one course to their enrollment, but it's future-proofing to
# prepare for a future where a student may have multiple courses.
type Course {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  flags: Int!
  parent: Enrollment! @relation(name: "EnrollmentToCourse")
  classrooms: [Classroom!]! @relation(name: "CourseToClassroom")
  masteries: [Mastery!]! @relation(name: "CourseToMastery")
  surveys: [Survey!]! @relation(name: "CourseToSurvey")
}

# This is the table that tracks the success of a student to a subsubject by relating to a course
# and a subsubject. This is also where a student could
type Mastery {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
  parent: Course! @relation(name: "CourseToMastery")
  subSubject: SubSubject! @relation(name: "MasteryToSubSubject")
}

# A survey is a flexible question where the app asks a user to respond with their own guess. If the
# guess is within a certain range it'll use that answer going forward and quiz them about it later.
# Ex: "Starting at what height would you describe an adult man to be 'very tall'?"
# A range could be "72-80 inches".
# If the user answers 6ft3in (75 inches), great. Next time it'll ask the user to identify that same
# imperial value again and then later ask to convert it to metric (in this example it would be 1.91m).
# And finally ask the user to identify the metric value.
type Survey {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  score: Int!
  answer: String!
  detail: String
  parent: Course! @relation(name: "CourseToSurvey")
  question: Question! @relation(name: "SurveyToQuestion")
}

# This is a shared subject of questions, such as length, temperature, or speed.
type Subject {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  description: String!
  measurementDescription: String!
  subSubjects: [SubSubject!]! @relation(name: "SubjectToSubSubject")
}

# This is a subdivision of a subject that mastery, units, scales, and questions are connected to.
# In my plan questions are divided in this way: You pick a subject (ex: length), you get a subsubject
# that is unit and scale (ex: meters, hand-sized) and whether the student is converting TO or FROM
# metric.
# So, for example. The subject length might have the following subsubjects:
# [length, hand-sized, to metric], [length, hand-sized, from metric],
# [length, room-sized, to metric], [length, room-sized, from metric], etc
type SubSubject {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String! @unique
  description: String!
  toMetric: Boolean!
  rarity: Int!
  scale: String!
  parent: Subject! @relation(name: "SubjectToSubSubject")
  questions: [Question!]! @relation(name: "SubSubjectToQuestion")
}

# These are pre-defined questions.
type Question {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  flags: Int!
  difficulty: Int!
  question: String!
  answer: String!
  media: String
  parent: SubSubject! @relation(name: "SubSubjectToQuestion")
  feedback: [Feedback!]! @relation(name: "QuestionToFeedback")
  author: User @relation(name: "UserToQuestion")
  reviewer: User @relation(name: "ReviewerToQuestion")
}

# So that users can provide feedback on questions they have problems with.
type Feedback {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Int!
  status: Int!
  text: String
  question: Question! @relation(name: "QuestionToFeedback")
  author: User! @relation(name: "UserToFeedback")
  reviewer: User @relation(name: "ReviewerToFeedback")
}